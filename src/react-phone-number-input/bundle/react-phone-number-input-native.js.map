{"version":3,"sources":["webpack://react-phone-number-input/webpack/universalModuleDefinition","webpack://react-phone-number-input/webpack/bootstrap","webpack://react-phone-number-input/./node_modules/prop-types/index.js","webpack://react-phone-number-input/external \"React\"","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/ParseError.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/constants.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/util.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/metadata.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/extension.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/isViablePhoneNumber.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/parseDigits.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/getNumberType_.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/isPossibleNumber_.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/IDD.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/RFC3966.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/validate_.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/format_.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/PhoneNumber.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/parse_.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/parsePhoneNumber.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/findNumbers/util.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/findNumbers/utf-8.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/findNumbers/Leniency.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/findNumbers/parsePreCandidate.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/findNumbers/isValidPreCandidate.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/findNumbers/isValidCandidate.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/PhoneNumberMatcher.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/findNumbers.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/findNumbers_.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/searchNumbers.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/AsYouType.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/getExampleNumber.js","webpack://react-phone-number-input/./node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","webpack://react-phone-number-input/./node_modules/classnames/index.js","webpack://react-phone-number-input/./commonjs/PhoneInput.js","webpack://react-phone-number-input/./commonjs/formatPhoneNumber.js","webpack://react-phone-number-input/./commonjs/PropTypes.js","webpack://react-phone-number-input/./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js","webpack://react-phone-number-input/./node_modules/semver-compare/index.js","webpack://react-phone-number-input/./commonjs/CountrySelectNative.js","webpack://react-phone-number-input/./commonjs/PhoneInputNative.js","webpack://react-phone-number-input/./commonjs/InternationalIcon.js","webpack://react-phone-number-input/./commonjs/PhoneInputNativeDefaults.js","webpack://react-phone-number-input/./commonjs/isValidPhoneNumber.js","webpack://react-phone-number-input/./commonjs/countries.js","webpack://react-phone-number-input/./commonjs/input-control.js","webpack://react-phone-number-input/./commonjs/Flag.js","webpack://react-phone-number-input/./commonjs/InputBasic.js","webpack://react-phone-number-input/./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://react-phone-number-input/./node_modules/fbjs/lib/invariant.js","webpack://react-phone-number-input/./node_modules/fbjs/lib/emptyFunction.js","webpack://react-phone-number-input/./node_modules/prop-types/factoryWithThrowingShims.js","webpack://react-phone-number-input/./core/index.commonjs.js","webpack://react-phone-number-input/./min/index.commonjs.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","ParseError","code","instance","Constructor","TypeError","ParseError_classCallCheck","this","constructor","message","stack","Error","es6_ParseError","create","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","VALID_PUNCTUATION","matchesEntirely","text","arguments","length","undefined","regular_expression","RegExp","test","metadata_typeof","Symbol","iterator","obj","metadata_createClass","defineProperties","target","props","descriptor","writable","key","protoProps","staticProps","metadata_classCallCheck","metadata_V3","metadata_Metadata","Metadata","metadata","metadata_is_object","countries","country_calling_codes","country_phone_code_to_countries","keys","join","metadata_type_of","metadata_validateMetadata","v1","version","v2","semver_compare_default","v3","country","_country","country_metadata","hasCountry","countryCallingCodes","countryCallingCode","_this","formats","_getFormats","getDefaultCountryMetadataForRegion","map","_","metadata_Format","_getNationalPrefixFormattingRule","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type","hasTypes","metadata_getType","metadata_Type","country_calling_code","Format","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","usesNationalPrefix","replace","Type","type","possibleLengths","metadata_getExtPrefix","ext","metadata_getCountryCallingCode","extension_RFC3966_EXTN_PREFIX","extension_CAPTURING_EXTN_DIGITS","extension_create_extension_pattern","purpose","single_extension_characters","extension_EXTN_PATTERNS_FOR_PARSING","extension_EXTN_PATTERNS_FOR_MATCHING","extension_EXTN_PATTERN","isViablePhoneNumber_VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber_isViablePhoneNumber","number","DIGITS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parseDigit","character","parseDigits","string","result","_iterator","split","_isArray","Array","isArray","_i","_ref","next","done","digit","parseIncompletePhoneNumber_parseIncompletePhoneNumber","parseIncompletePhoneNumber_parsePhoneNumberCharacter","getNumberType_NON_FIXED_LINE_PHONE_TYPES","getNumberType_getNumberType","input","options","es6_metadata","nationalNumber","phone","nationalNumberPattern","getNumberType_is_of_type","pattern","indexOf","getNumberType_check_number_length_for_type","type_info","possible_lengths","mobile_type","a","b","merged","slice","_iterator2","_isArray2","_i2","_ref2","element","push","sort","getNumberType_merge_arrays","actual_length","minimum_length","isPossibleNumber_is_possible_number","national_number","is_international","IDD_CAPTURING_DIGIT_PATTERN","IDD_SINGLE_IDD_PREFIX","RFC3966_slicedToArray","arr","_arr","_n","_d","_e","_s","err","sliceIterator","RFC3966_parseRFC3966","_part$split","_part$split2","RFC3966_formatRFC3966","validate_isValidNumber","format_extends","assign","source","format_defaultOptions","formatExtension","extension","format_formatNumber","chooseCountryByCountryCallingCode","format_add_extension","format_format_national_number","fromCountry","IDDPrefix","countryMetadata","defaultIDDPrefix","IDD_getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","format_formatIDDSameCountryCallingCodeNumber","format_FIRST_GROUP_PATTERN","format_format_national_number_using_format","useInternationalFormat","includeNationalPrefixForNationalFormat","formattedNumber","internationalFormat","format_changeInternationalFormatStyle","format_as","available_formats","leadingDigitsPatterns","last_leading_digits_pattern","search","format_choose_format_for_number","local","trim","PhoneNumber_extends","PhoneNumber_createClass","es6_PhoneNumber","PhoneNumber","PhoneNumber_classCallCheck","PhoneNumber_isCountryCode","_metadata","isPossibleNumber_isPossibleNumber","parse_MAX_INPUT_STRING_LENGTH","parse_PHONE_NUMBER_START_PATTERN","parse_AFTER_PHONE_NUMBER_END_PATTERN","parse_parse","defaultCountry","_parse_input","parse_extract_formatted_phone_number","with_extension_stripped","start","number_without_extension","matches","match","extension_extractExtension","parse_parse_input","formatted_phone_number","_parse_phone_number","default_country","_extractCountryCallin","parse_extractCountryCallingCode","_parse_national_numbe","carrier_code","_strip_national_prefi","parse_strip_national_prefix_and_carrier_code","potential_national_number","carrierCode","parse_parse_national_number","exactCountry","parse_find_country_code","parse_parse_phone_number","selectedCountry","phoneNumber","valid","extended","possible","parse_result","starts_at","nationalPrefixForParsing","national_prefix_pattern","national_prefix_matcher","exec","national_significant_number","captured_groups_count","nationalPrefixTransformRule","national_phone_number","possible_countries","leadingDigits","es6_parse_find_country_code","numberWithoutIDD","IDDPrefixPattern","matchedGroups","IDD_stripIDDPrefix","parsePhoneNumber_typeof","parsePhoneNumber_extends","parsePhoneNumber_parsePhoneNumber","arg_1","arg_2","arg_3","arg_4","_sort_out_arguments","parsePhoneNumber_sort_out_arguments","parsePhoneNumber_isObject","parsePhoneNumberFromString_parsePhoneNumberFromString","apply","error","limit","lower","upper","trimAfterFirstMatch","regexp","index","_pZ","pZ","_pL","pL_regexp","pSc_regexp","pMn_regexp","latinLetterRegexp","isLatinLetter","letter","isInvalidPunctuationSymbol","Leniency","POSSIBLE","candidate","VALID","Leniency_containsOnlyValidXChars","toString","STRICT_GROUPING","candidateString","Leniency_containsMoreThanOneSlashInNationalNumber","Leniency_isNationalPrefixPresentIfRequired","Leniency_checkNumberGroupingIsValid","Leniency_allNumberGroupsRemainGrouped","EXACT_GROUPING","Leniency_allNumberGroupsAreExactlyPresent","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","substring","MatchType","NSN_MATCH","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","secondSlashInBodyIndex","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","Leniency_getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","formattingPattern","nationalSignificantNumber","formatNsnUsingPattern","rfc3966Format","formatNumber","endIndex","startIndex","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","fromIndex","FROM_DEFAULT_COUNTRY","countryCode","region","getNddPrefixForRegion","Character","isDigit","getExtension","parsePreCandidate_SECOND_NUMBER_START_PATTERN","parsePreCandidate_parsePreCandidate","SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","isValidPreCandidate","offset","followingText","isValidCandidate_LEAD_CLASS_LEADING","isValidCandidate_BRACKET_PAIR_LIMIT","isValidCandidate_MATCHING_BRACKETS_ENTIRE","isValidCandidate_PUB_PAGES","PhoneNumberMatcher_extends","PhoneNumberMatcher_createClass","PhoneNumberMatcher_INNER_MATCHES","PhoneNumberMatcher_leadLimit","PhoneNumberMatcher_punctuationLimit","PhoneNumberMatcher_digitBlockLimit","PhoneNumberMatcher_blockLimit","PhoneNumberMatcher_punctuation","PhoneNumberMatcher_digitSequence","PhoneNumberMatcher_PATTERN","PhoneNumberMatcher_UNWANTED_END_CHAR_PATTERN","PhoneNumberMatcher_MAX_SAFE_INTEGER","Number","MAX_SAFE_INTEGER","Math","pow","es6_PhoneNumberMatcher","PhoneNumberMatcher","PhoneNumberMatcher_classCallCheck","state","searchIndex","leniency","maxTries","PATTERN","parseAndVerify","extractInnerMatch","startsAt","endsAt","isFirstMatch","possibleInnerMatch","_group","_match","group","previousChar","lastCharIndex","nextChar","isValidCandidate_isValidCandidate","lastMatch","find","hasNext","es6_findNumbers_findNumbers","matcher","results","findNumbers_findNumbers","searchNumbers_searchNumbers","AsYouType_createClass","AsYouType_LONGEST_DUMMY_PHONE_NUMBER","AsYouType_repeat","AsYouType_DIGIT_PLACEHOLDER_MATCHER","AsYouType_CREATE_CHARACTER_CLASS_PATTERN","AsYouType_CREATE_STANDALONE_DIGIT_PATTERN","AsYouType_ELIGIBLE_FORMAT_PATTERN","AsYouType_VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","es6_AsYouType","AsYouType","country_code","AsYouType_classCallCheck","reset","extracted_number","process_input","current_output","parsed_input","reset_countriness","determine_the_country","extract_country_calling_code","initialize_phone_number_formats_for_this_country_calling_code","reset_format","previous_national_prefix","national_prefix","extract_national_prefix","matching_formats","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","format_national_phone_number","full_phone_number","next_digits","national_number_formatted_with_previous_format","chosen_format","format_next_national_number_digits","formatted_number","attempt_to_format_complete_phone_number","choose_another_format","reformat_national_number","reset_country","template","partially_populated_template","last_match_position","filter","leading_digits","index_of_leading_digits_pattern","had_enough_leading_digits","should_format","leading_digits_patterns_count","leading_digits_pattern_index","min","leading_digits_pattern","is_format_applicable","create_formatting_template","full_number","formatted_national_number","is_possible_number","nationalPrefixIsMandatoryWhenFormatting","get_template_for_phone_number_format_pattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","get_format_format","strict_pattern","national_number_dummy_digits","digits","_iterator3","_isArray3","_i3","_ref3","AsYouType_cut_stripping_dangling_braces","cut_before_index","dangling_braces","pop","cleared_string","_iterator4","_isArray4","_i4","_ref4","AsYouType_strip_dangling_braces","times","getExampleNumber_getExampleNumber","examples","formatIncompletePhoneNumber_formatIncompletePhoneNumber","__WEBPACK_AMD_DEFINE_RESULT__","hasOwn","classNames","classes","arg","argType","default","_class","_class2","_temp","_initialiseProps","_extends","_createClass","_react2","_interopRequireDefault","_propTypes2","_classnames2","_reactLifecyclesCompat","_core","_InputBasic2","_Flag2","_PropTypes","_inputControl","_countries","PureComponent","Component","PhoneNumberInput","polyfill","_PureComponent","_classCallCheck","self","ReferenceError","_typeof","_possibleConstructorReturn","__proto__","getPrototypeOf","_this$props","countryOptions","labels","international","validateCountry","validateCountries","validateCountryOptions","parsePhoneNumber","pre_selected_country","getPreSelectedCountry","getCountryCodes","country_select_options","generate_country_select_options","generateParsedInput","subClass","superClass","setPrototypeOf","_inherits","_props","onCountryChange","prevProps","prevState","_props2","_props3","disabled","disablePhoneInput","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","getInputClassName","countrySelectProperties","indicateInvalid","CountrySelectComponent","countrySelectComponent","InputComponent","inputComponent","flags","flagComponent","flagsPath","internationalIcon","displayInitialValueAsLocalNumber","limitMaxLength","phoneNumberInputProps","_objectWithoutProperties","_state","hidePhoneInputField","isFocused","_countrySelectProps","createElement","react-phone-number-input--focus","react-phone-number-input--invalid","ref","storeCountrySelectInstance","onChange","onFocus","_onFocus","onBlur","_onBlur","tabIndex","focusPhoneInputField","focus","aria-label","storePhoneNumberInputInstance","onKeyDown","onPhoneNumberKeyDown","react-phone-number-input__input--disabled","react-phone-number-input__input--invalid","invalid","cloneElement","event","parseExtDigits","hasUserSelectedACountry","_state$props","old_default_country","old_value","new_default_country","new_value","new_state","propTypes","func","isRequired","bool","arrayOf","objectOf","node","defaultProps","_this2","new_country","_props4","_state2","old_parsed_input","old_country","new_parsed_input","migrateParsedInputForNewCountry","e164","setState","_input","_props5","_parseInput","parseInput","_event","stopPropagation","preventDefault","hide","number_input","country_select","CountrySelectOptionIcon","FlagComponent","InternationalIcon","react-phone-number-input__icon--international","createCountrySelectOptionIconComponent","transform","optionsOnTop","optionsOnBottom","appendTo","_loop","divider","option","splice","_ret","concat","transformCountryOptions","getCountrySelectOptions","label","icon","generateNationalNumberDigits","throwCountryNotFound","_ref5","_typeof2","formatPhoneNumber","formatPhoneNumberIntl","parsePhoneNumberFromString","_propTypes","shape","componentWillMount","getDerivedStateFromProps","componentWillReceiveProps","nextProps","bind","componentWillUpdate","nextState","__reactInternalSnapshotFlag","__reactInternalSnapshot","getSnapshotBeforeUpdate","isReactComponent","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","componentName","displayName","newApiName","componentDidUpdate","maybeSnapshot","snapshot","__webpack_exports__","__suppressDeprecationWarning","pa","pb","na","nb","isNaN","_temp2","_react","CountrySelectNative","_Component","_len","args","_key","SelectArrow","selectArrowComponent","selectedOption","_PhoneInput2","_CountrySelectNative2","PhoneInputNative","storeInputRef","countrySelectArrowComponent","xmlns","xmlnsXlink","viewBox","points","createPhoneInput","_default2","_InternationalIcon2","_PhoneInputNative2","defaultMetadata","PhoneInputNativeDefaults","render","isValid","toUpperCase","includeInternationalOption","country_names","compare_strings","unshift","ZZ","formatNational","previous_country","preferNationalFormat","derived_country","get_country_from_possibly_incomplete_international_phone_number","strip_country_calling_code","getCountryCallingCode","trimNumber","getCountryForPartialE164Number","get_national_significant_number_part","could_number_belong_to_country","partial_national_significant_number","overflowDigitsCount","getMaxNumberLength","partialE164Number","formatter","localeCompare","country_calling_prefix","getNationalNumber","alt","src","toLowerCase","createInput","InputBasic","newValue","parseIncompletePhoneNumber","storeInput","formatIncompletePhoneNumber","rest","validateFormat","condition","e","f","argIndex","framesToPop","makeEmptyFunction","emptyFunction","thatReturns","thatReturnsFalse","thatReturnsTrue","thatReturnsNull","thatReturnsThis","thatReturnsArgument","invariant","ReactPropTypesSecret","shim","propName","location","propFullName","secret","getShim","ReactPropTypes","array","symbol","any","instanceOf","oneOf","oneOfType","exact","checkPropTypes","PropTypes","isValidPhoneNumber","core","_arguments","PhoneInput"],"mappings":"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","file":"react-phone-number-input-native.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"React\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"react-phone-number-input\", [\"React\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-phone-number-input\"] = factory(require(\"React\"));\n\telse\n\t\troot[\"react-phone-number-input\"] = factory(root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport default ParseError;\n\n\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2;\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nexport var MAX_LENGTH_FOR_NSN = 17;\n\n// The maximum length of the country calling code.\nexport var MAX_LENGTH_COUNTRY_CODE = 3;\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nexport var VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9';\n\n// `DASHES` will be right after the opening square bracket of the \"character class\"\nvar DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D';\nvar SLASHES = '\\uFF0F/';\nvar DOTS = '\\uFF0E.';\nexport var WHITESPACE = ' \\xA0\\xAD\\u200B\\u2060\\u3000';\nvar BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]';\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\nvar TILDES = '~\\u2053\\u223C\\uFF5E';\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nexport var VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\n\nexport var PLUS_CHARS = '+\\uFF0B';\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matchesEntirely() {\n\tvar text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\tvar regular_expression = arguments[1];\n\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n//# sourceMappingURL=util.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport compare from 'semver-compare';\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nvar V2 = '1.0.18';\n\n// Added \"idd_prefix\" and \"default_idd_prefix\".\nvar V3 = '1.2.0';\n\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n\nvar Metadata = function () {\n\tfunction Metadata(metadata) {\n\t\t_classCallCheck(this, Metadata);\n\n\t\tvalidateMetadata(metadata);\n\n\t\tthis.metadata = metadata;\n\n\t\tthis.v1 = !metadata.version;\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n\t\tthis.v3 = metadata.version !== undefined; // && compare(metadata.version, V4) === -1\n\t}\n\n\t_createClass(Metadata, [{\n\t\tkey: 'hasCountry',\n\t\tvalue: function hasCountry(country) {\n\t\t\treturn this.metadata.countries[country] !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'country',\n\t\tvalue: function country(_country) {\n\t\t\tif (!_country) {\n\t\t\t\tthis._country = undefined;\n\t\t\t\tthis.country_metadata = undefined;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (!this.hasCountry(_country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + _country);\n\t\t\t}\n\n\t\t\tthis._country = _country;\n\t\t\tthis.country_metadata = this.metadata.countries[_country];\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'getDefaultCountryMetadataForRegion',\n\t\tvalue: function getDefaultCountryMetadataForRegion() {\n\t\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]];\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCode',\n\t\tvalue: function countryCallingCode() {\n\t\t\treturn this.country_metadata[0];\n\t\t}\n\t}, {\n\t\tkey: 'IDDPrefix',\n\t\tvalue: function IDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[1];\n\t\t}\n\t}, {\n\t\tkey: 'defaultIDDPrefix',\n\t\tvalue: function defaultIDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[12];\n\t\t}\n\t}, {\n\t\tkey: 'nationalNumberPattern',\n\t\tvalue: function nationalNumberPattern() {\n\t\t\tif (this.v1 || this.v2) return this.country_metadata[1];\n\t\t\treturn this.country_metadata[2];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.v1) return;\n\t\t\treturn this.country_metadata[this.v2 ? 2 : 3];\n\t\t}\n\t}, {\n\t\tkey: '_getFormats',\n\t\tvalue: function _getFormats(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// formats are all stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'formats',\n\t\tvalue: function formats() {\n\t\t\tvar _this = this;\n\n\t\t\tvar formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n\t\t\treturn formats.map(function (_) {\n\t\t\t\treturn new Format(_, _this);\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefix',\n\t\tvalue: function nationalPrefix() {\n\t\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixFormattingRule',\n\t\tvalue: function _getNationalPrefixFormattingRule(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// national prefix formatting rule is stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixForParsing',\n\t\tvalue: function nationalPrefixForParsing() {\n\t\t\t// If `national_prefix_for_parsing` is not set explicitly,\n\t\t\t// then infer it from `national_prefix` (if any)\n\t\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixTransformRule',\n\t\tvalue: function nationalPrefixTransformRule() {\n\t\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function _getNationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// \"national prefix is optional when parsing\" flag is\n\t\t// stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigits',\n\t\tvalue: function leadingDigits() {\n\t\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n\t\t}\n\t}, {\n\t\tkey: 'types',\n\t\tvalue: function types() {\n\t\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n\t\t}\n\t}, {\n\t\tkey: 'hasTypes',\n\t\tvalue: function hasTypes() {\n\t\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this.types() && this.types().length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Versions <= 1.2.4: can be `undefined`.\n\t\t\t// Version >= 1.2.5: can be `0`.\n\t\t\treturn !!this.types();\n\t\t}\n\t}, {\n\t\tkey: 'type',\n\t\tvalue: function type(_type) {\n\t\t\tif (this.hasTypes() && getType(this.types(), _type)) {\n\t\t\t\treturn new Type(getType(this.types(), _type), this);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'ext',\n\t\tvalue: function ext() {\n\t\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n\t\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX;\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCodes',\n\t\tvalue: function countryCallingCodes() {\n\t\t\tif (this.v1) return this.metadata.country_phone_code_to_countries;\n\t\t\treturn this.metadata.country_calling_codes;\n\t\t}\n\n\t\t// Formatting information for regions which share\n\t\t// a country calling code is contained by only one region\n\t\t// for performance reasons. For example, for NANPA region\n\t\t// (\"North American Numbering Plan Administration\",\n\t\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t\t// it will be contained in the metadata for `US`.\n\t\t//\n\t\t// `country_calling_code` is always valid.\n\t\t// But the actual country may not necessarily be part of the metadata.\n\t\t//\n\n\t}, {\n\t\tkey: 'chooseCountryByCountryCallingCode',\n\t\tvalue: function chooseCountryByCountryCallingCode(country_calling_code) {\n\t\t\tvar country = this.countryCallingCodes()[country_calling_code][0];\n\n\t\t\t// Do not want to test this case.\n\t\t\t// (custom metadata, not all countries).\n\t\t\t/* istanbul ignore else */\n\t\t\tif (this.hasCountry(country)) {\n\t\t\t\tthis.country(country);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'selectedCountry',\n\t\tvalue: function selectedCountry() {\n\t\t\treturn this._country;\n\t\t}\n\t}]);\n\n\treturn Metadata;\n}();\n\nexport default Metadata;\n\nvar Format = function () {\n\tfunction Format(format, metadata) {\n\t\t_classCallCheck(this, Format);\n\n\t\tthis._format = format;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Format, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\treturn this._format[0];\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format() {\n\t\t\treturn this._format[1];\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigitsPatterns',\n\t\tvalue: function leadingDigitsPatterns() {\n\t\t\treturn this._format[2] || [];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsMandatoryWhenFormatting',\n\t\tvalue: function nationalPrefixIsMandatoryWhenFormatting() {\n\t\t\t// National prefix is omitted if there's no national prefix formatting rule\n\t\t\t// set for this country, or when the national prefix formatting rule\n\t\t\t// contains no national prefix itself, or when this rule is set but\n\t\t\t// national prefix is optional for this phone number format\n\t\t\t// (and it is not enforced explicitly)\n\t\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\n\t\t// Checks whether national prefix formatting rule contains national prefix.\n\n\t}, {\n\t\tkey: 'usesNationalPrefix',\n\t\tvalue: function usesNationalPrefix() {\n\t\t\treturn this.nationalPrefixFormattingRule() &&\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\n\t\t\tthis.nationalPrefixFormattingRule() !== '$1' &&\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''));\n\t\t}\n\t}, {\n\t\tkey: 'internationalFormat',\n\t\tvalue: function internationalFormat() {\n\t\t\treturn this._format[5] || this.format();\n\t\t}\n\t}]);\n\n\treturn Format;\n}();\n\nvar Type = function () {\n\tfunction Type(type, metadata) {\n\t\t_classCallCheck(this, Type);\n\n\t\tthis.type = type;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Type, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\tif (this.metadata.v1) return this.type;\n\t\t\treturn this.type[0];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.metadata.v1) return;\n\t\t\treturn this.type[1] || this.metadata.possibleLengths();\n\t\t}\n\t}]);\n\n\treturn Type;\n}();\n\nfunction getType(types, type) {\n\tswitch (type) {\n\t\tcase 'FIXED_LINE':\n\t\t\treturn types[0];\n\t\tcase 'MOBILE':\n\t\t\treturn types[1];\n\t\tcase 'TOLL_FREE':\n\t\t\treturn types[2];\n\t\tcase 'PREMIUM_RATE':\n\t\t\treturn types[3];\n\t\tcase 'PERSONAL_NUMBER':\n\t\t\treturn types[4];\n\t\tcase 'VOICEMAIL':\n\t\t\treturn types[5];\n\t\tcase 'UAN':\n\t\t\treturn types[6];\n\t\tcase 'PAGER':\n\t\t\treturn types[7];\n\t\tcase 'VOIP':\n\t\t\treturn types[8];\n\t\tcase 'SHARED_COST':\n\t\t\treturn types[9];\n\t}\n}\n\nexport function validateMetadata(metadata) {\n\tif (!metadata) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n\t}\n\n\t// `country_phone_code_to_countries` was renamed to\n\t// `country_calling_codes` in `1.0.18`.\n\tif (!is_object(metadata) || !is_object(metadata.countries) || !is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries)) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument was passed but it\\'s not a valid metadata. Must be an object having `.countries` and `.country_calling_codes` child object properties. Got ' + (is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata) + '.');\n\t}\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar type_of = function type_of(_) {\n\treturn typeof _ === 'undefined' ? 'undefined' : _typeof(_);\n};\n\nexport function getExtPrefix(country, metadata) {\n\treturn new Metadata(metadata).country(country).ext();\n}\n\nexport function getCountryCallingCode(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (!metadata.hasCountry(country)) {\n\t\tthrow new Error('Unknown country: ' + country);\n\t}\n\treturn metadata.country(country).countryCallingCode();\n}\n//# sourceMappingURL=metadata.js.map","import { VALID_DIGITS } from './constants';\n\n// The RFC 3966 format for extensions.\nvar RFC3966_EXTN_PREFIX = ';ext=';\n\n// Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nfunction create_extension_pattern(purpose) {\n\t// One-character symbols that can be used to indicate an extension.\n\tvar single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E';\n\n\tswitch (purpose) {\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n\t\tcase 'parsing':\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters;\n\t}\n\n\treturn RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + '[ \\xA0\\\\t,]*' + '(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\n\t// \"доб.\"\n\t'\\u0434\\u043E\\u0431|' + '[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' + '[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*' + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nexport var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\n\nexport var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching');\n\n// Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i');\n\n// Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\nexport function extractExtension(number) {\n\tvar start = number.search(EXTN_PATTERN);\n\tif (start < 0) {\n\t\treturn {};\n\t}\n\n\t// If we find a potential extension, and the number preceding this is a viable\n\t// number, we assume it is an extension.\n\tvar number_without_extension = number.slice(0, start);\n\n\tvar matches = number.match(EXTN_PATTERN);\n\tvar i = 1;\n\twhile (i < matches.length) {\n\t\tif (matches[i] != null && matches[i].length > 0) {\n\t\t\treturn {\n\t\t\t\tnumber: number_without_extension,\n\t\t\t\text: matches[i]\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n}\n//# sourceMappingURL=extension.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension';\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}';\n//\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\n// The combined regular expression for valid phone numbers:\n//\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i');\n\n// Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\nexport default function isViablePhoneNumber(number) {\n\treturn number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n\nexport function parseDigit(character) {\n\treturn DIGITS[character];\n}\n\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\nexport default function parseDigits(string) {\n\tvar result = '';\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tvar digit = parseDigit(character);\n\t\tif (digit) {\n\t\t\tresult += digit;\n\t\t}\n\t}\n\n\treturn result;\n}\n//# sourceMappingURL=parseDigits.js.map","import { parseDigit } from './parseDigits';\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\nexport default function parseIncompletePhoneNumber(string) {\n\tvar result = '';\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tresult += parsePhoneNumberCharacter(character, result) || '';\n\t}\n\n\treturn result;\n}\n\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\nexport function parsePhoneNumberCharacter(character, value) {\n\t// Only allow a leading `+`.\n\tif (character === '+') {\n\t\t// If this `+` is not the first parsed character\n\t\t// then discard it.\n\t\tif (value) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn '+';\n\t}\n\n\t// Allow digits.\n\treturn parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\n\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL'];\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function getNumberType(input) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\t// When `parse()` returned `{}`\n\t// meaning that the phone number is not a valid one.\n\tif (!input.country) {\n\t\treturn;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (!metadata.hasCountry(input.country)) {\n\t\tthrow new Error('Unknown country: ' + input.country);\n\t}\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\tmetadata.country(input.country);\n\n\t// The following is copy-pasted from the original function:\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n\n\t// Is this national number even valid for this country\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n\t\treturn;\n\t}\n\n\t// Is it fixed line number\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n\t\t// Because duplicate regular expressions are removed\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\n\t\t//\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// v1 metadata.\n\t\t// Legacy.\n\t\t// Deprecated.\n\t\tif (!metadata.type('MOBILE')) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\n\t\t// (no such country in the minimal metadata set)\n\t\t/* istanbul ignore if */\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\treturn 'FIXED_LINE';\n\t}\n\n\tfor (var _iterator = NON_FIXED_LINE_PHONE_TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar _type = _ref;\n\n\t\tif (is_of_type(nationalNumber, _type, metadata)) {\n\t\t\treturn _type;\n\t\t}\n\t}\n}\n\nexport function is_of_type(nationalNumber, type, metadata) {\n\ttype = metadata.type(type);\n\n\tif (!type || !type.pattern()) {\n\t\treturn false;\n\t}\n\n\t// Check if any possible number lengths are present;\n\t// if so, we use them to avoid checking\n\t// the validation pattern if they don't match.\n\t// If they are absent, this means they match\n\t// the general description, which we have\n\t// already checked before a specific number type.\n\tif (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n\t\treturn false;\n\t}\n\n\treturn matchesEntirely(nationalNumber, type.pattern());\n}\n\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\nexport function check_number_length_for_type(nationalNumber, type, metadata) {\n\tvar type_info = metadata.type(type);\n\n\t// There should always be \"<possiblePengths/>\" set for every type element.\n\t// This is declared in the XML schema.\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n\t// so we fall back to the \"general description\". Where no numbers of the type\n\t// exist at all, there is one possible length (-1) which is guaranteed\n\t// not to match the length of any real phone number.\n\tvar possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\n\t\t// No such country in metadata.\n\t\t/* istanbul ignore next */\n\t\tif (!metadata.type('FIXED_LINE')) {\n\t\t\t// The rare case has been encountered where no fixedLine data is available\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\n\t\t\treturn check_number_length_for_type(nationalNumber, 'MOBILE', metadata);\n\t\t}\n\n\t\tvar mobile_type = metadata.type('MOBILE');\n\n\t\tif (mobile_type) {\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\n\t\t\t// Note that when adding the possible lengths from mobile, we have\n\t\t\t// to again check they aren't empty since if they are this indicates\n\t\t\t// they are the same as the general desc and should be obtained from there.\n\t\t\tpossible_lengths = merge_arrays(possible_lengths, mobile_type.possibleLengths());\n\t\t\t// The current list is sorted; we need to merge in the new list and\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\n\t\t\t// the lists are very small.\n\n\t\t\t// if (local_lengths)\n\t\t\t// {\n\t\t\t// \tlocal_lengths = merge_arrays(local_lengths, mobile_type.possibleLengthsLocal())\n\t\t\t// }\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\n\t\t\t// }\n\t\t}\n\t}\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\n\telse if (type && !type_info) {\n\t\t\treturn 'INVALID_LENGTH';\n\t\t}\n\n\tvar actual_length = nationalNumber.length;\n\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n\t// // This is safe because there is never an overlap beween the possible lengths\n\t// // and the local-only lengths; this is checked at build time.\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n\t// {\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n\t// }\n\n\tvar minimum_length = possible_lengths[0];\n\n\tif (minimum_length === actual_length) {\n\t\treturn 'IS_POSSIBLE';\n\t}\n\n\tif (minimum_length > actual_length) {\n\t\treturn 'TOO_SHORT';\n\t}\n\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\n\t\treturn 'TOO_LONG';\n\t}\n\n\t// We skip the first element since we've already checked it.\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n\nexport function merge_arrays(a, b) {\n\tvar merged = a.slice();\n\n\tfor (var _iterator2 = b, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n\t\tvar _ref2;\n\n\t\tif (_isArray2) {\n\t\t\tif (_i2 >= _iterator2.length) break;\n\t\t\t_ref2 = _iterator2[_i2++];\n\t\t} else {\n\t\t\t_i2 = _iterator2.next();\n\t\t\tif (_i2.done) break;\n\t\t\t_ref2 = _i2.value;\n\t\t}\n\n\t\tvar element = _ref2;\n\n\t\tif (a.indexOf(element) < 0) {\n\t\t\tmerged.push(element);\n\t\t}\n\t}\n\n\treturn merged.sort(function (a, b) {\n\t\treturn a - b;\n\t});\n\n\t// ES6 version, requires Set polyfill.\n\t// let merged = new Set(a)\n\t// for (const element of b)\n\t// {\n\t// \tmerged.add(i)\n\t// }\n\t// return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=getNumberType_.js.map","import Metadata from './metadata';\nimport { check_number_length_for_type } from './getNumberType_';\n\nexport default function isPossibleNumber(input, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (options.v2) {\n\t\tif (!input.countryCallingCode) {\n\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t}\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else {\n\t\tif (!input.phone) {\n\t\t\treturn false;\n\t\t}\n\t\tif (input.country) {\n\t\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t\t}\n\t\t\tmetadata.country(input.country);\n\t\t} else {\n\t\t\tif (!input.countryCallingCode) {\n\t\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t\t}\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t\t}\n\t}\n\n\tif (!metadata.possibleLengths()) {\n\t\tthrow new Error('Metadata too old');\n\t}\n\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\n\nexport function is_possible_number(national_number, is_international, metadata) {\n\tswitch (check_number_length_for_type(national_number, undefined, metadata)) {\n\t\tcase 'IS_POSSIBLE':\n\t\t\treturn true;\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t// \treturn !is_international\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\n\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/;\n\n// For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\nexport function getIDDPrefix(country, metadata) {\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n\t\treturn countryMetadata.IDDPrefix();\n\t}\n\n\treturn countryMetadata.defaultIDDPrefix();\n}\n\nexport function stripIDDPrefix(number, country, metadata) {\n\tif (!country) {\n\t\treturn;\n\t}\n\n\t// Check if the number is IDD-prefixed.\n\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tvar IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n\tif (number.search(IDDPrefixPattern) !== 0) {\n\t\treturn;\n\t}\n\n\t// Strip IDD prefix.\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length);\n\n\t// Some kind of a weird edge case.\n\t// No explanation from Google given.\n\tvar matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\t/* istanbul ignore next */\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n\t\tif (matchedGroups[1] === '0') {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn number;\n}\n//# sourceMappingURL=IDD.js.map","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport isViablePhoneNumber from './isViablePhoneNumber';\n\n// https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nexport function parseRFC3966(text) {\n\tvar number = void 0;\n\tvar ext = void 0;\n\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\n\ttext = text.replace(/^tel:/, 'tel=');\n\n\tfor (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar part = _ref;\n\n\t\tvar _part$split = part.split('='),\n\t\t    _part$split2 = _slicedToArray(_part$split, 2),\n\t\t    name = _part$split2[0],\n\t\t    value = _part$split2[1];\n\n\t\tswitch (name) {\n\t\t\tcase 'tel':\n\t\t\t\tnumber = value;\n\t\t\t\tbreak;\n\t\t\tcase 'ext':\n\t\t\t\text = value;\n\t\t\t\tbreak;\n\t\t\tcase 'phone-context':\n\t\t\t\t// Only \"country contexts\" are supported.\n\t\t\t\t// \"Domain contexts\" are ignored.\n\t\t\t\tif (value[0] === '+') {\n\t\t\t\t\tnumber = value + number;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// If the phone number is not viable, then abort.\n\tif (!isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\tvar result = { number: number };\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\treturn result;\n}\n\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\nexport function formatRFC3966(_ref2) {\n\tvar number = _ref2.number,\n\t    ext = _ref2.ext;\n\n\tif (!number) {\n\t\treturn '';\n\t}\n\n\tif (number[0] !== '+') {\n\t\tthrow new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n\t}\n\n\treturn 'tel:' + number + (ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\nimport getNumberType from './getNumberType_';\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nexport default function isValidNumber(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n\n  metadata = new Metadata(metadata);\n\n  // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n  if (!input.country) {\n    return false;\n  }\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  metadata.country(input.country);\n\n  // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  }\n\n  // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\n\nvar defaultOptions = {\n\tformatExtension: function formatExtension(number, extension, metadata) {\n\t\treturn '' + number + metadata.ext() + extension;\n\t}\n\n\t// Formats a phone number\n\t//\n\t// Example use cases:\n\t//\n\t// ```js\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n\t// formatNumber('+78005553535', 'NATIONAL')\n\t// formatNumber('+78005553535', 'NATIONAL', metadata)\n\t// ```\n\t//\n};export default function formatNumber(input, format, options, metadata) {\n\t// Apply default options.\n\tif (options) {\n\t\toptions = _extends({}, defaultOptions, options);\n\t} else {\n\t\toptions = defaultOptions;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (input.country) {\n\t\t// Validate `input.country`.\n\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t}\n\t\tmetadata.country(input.country);\n\t} else if (input.countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else return input.phone || '';\n\n\tvar countryCallingCode = metadata.countryCallingCode();\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\n\t// This variable should have been declared inside `case`s\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\n\tvar number = void 0;\n\n\tswitch (format) {\n\t\tcase 'NATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tnumber = format_national_number(nationalNumber, 'NATIONAL', metadata);\n\t\t\treturn add_extension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'INTERNATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '+' + countryCallingCode;\n\t\t\t}\n\t\t\tnumber = format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n\t\t\tnumber = '+' + countryCallingCode + ' ' + number;\n\t\t\treturn add_extension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'E.164':\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\n\t\t\treturn '+' + countryCallingCode + nationalNumber;\n\n\t\tcase 'RFC3966':\n\t\t\treturn formatRFC3966({\n\t\t\t\tnumber: '+' + countryCallingCode + nationalNumber,\n\t\t\t\text: input.ext\n\t\t\t});\n\n\t\tcase 'IDD':\n\t\t\tif (!options.fromCountry) {\n\t\t\t\treturn;\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n\t\t\t}\n\t\t\tvar IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata);\n\t\t\tif (!IDDPrefix) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (options.humanReadable) {\n\t\t\t\tvar formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata);\n\t\t\t\tif (formattedForSameCountryCallingCode) {\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode;\n\t\t\t\t} else {\n\t\t\t\t\tnumber = IDDPrefix + ' ' + countryCallingCode + ' ' + format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n\t\t\t\t}\n\t\t\t\treturn add_extension(number, input.ext, metadata, options.formatExtension);\n\t\t\t}\n\t\t\treturn '' + IDDPrefix + countryCallingCode + nationalNumber;\n\n\t\tdefault:\n\t\t\tthrow new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"' + format + '\"');\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\n\nexport function format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata) {\n\tvar formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : format.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n\tif (useInternationalFormat) {\n\t\treturn changeInternationalFormatStyle(formattedNumber);\n\t}\n\n\treturn formattedNumber;\n}\n\nfunction format_national_number(number, format_as, metadata) {\n\tvar format = choose_format_for_number(metadata.formats(), number);\n\tif (!format) {\n\t\treturn number;\n\t}\n\treturn format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata);\n}\n\nexport function choose_format_for_number(available_formats, national_number) {\n\tfor (var _iterator = available_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar format = _ref;\n\n\t\t// Validate leading digits\n\t\tif (format.leadingDigitsPatterns().length > 0) {\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\tvar last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1];\n\n\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Check that the national number matches the phone number format regular expression\n\t\tif (matchesEntirely(national_number, format.pattern())) {\n\t\t\treturn format;\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\nexport function changeInternationalFormatStyle(local) {\n\treturn local.replace(new RegExp('[' + VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\nfunction add_extension(number, ext, metadata, formatExtension) {\n\treturn ext ? formatExtension(number, ext, metadata) : number;\n}\n\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata) {\n\tvar fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n\tfromCountryMetadata.country(fromCountry);\n\n\t// If calling within the same country calling code.\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n\t\t// For NANPA regions, return the national format for these regions\n\t\t// but prefix it with the country calling code.\n\t\tif (toCountryCallingCode === '1') {\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata);\n\t\t}\n\n\t\t// If regions share a country calling code, the country calling code need\n\t\t// not be dialled. This also applies when dialling within a region, so this\n\t\t// if clause covers both these cases. Technically this is the case for\n\t\t// dialling from La Reunion to other overseas departments of France (French\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n\t\t// this edge case for now and for those cases return the version including\n\t\t// country calling code. Details here:\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\n\t\t//\n\t\treturn format_national_number(number, 'NATIONAL', toCountryMetadata);\n\t}\n}\n//# sourceMappingURL=format_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\n\nvar PhoneNumber = function () {\n\tfunction PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n\t\t_classCallCheck(this, PhoneNumber);\n\n\t\tif (!countryCallingCode) {\n\t\t\tthrow new TypeError('`countryCallingCode` not passed');\n\t\t}\n\t\tif (!nationalNumber) {\n\t\t\tthrow new TypeError('`nationalNumber` not passed');\n\t\t}\n\t\t// If country code is passed then derive `countryCallingCode` from it.\n\t\t// Also store the country code as `.country`.\n\t\tif (isCountryCode(countryCallingCode)) {\n\t\t\tthis.country = countryCallingCode;\n\t\t\tvar _metadata = new Metadata(metadata);\n\t\t\t_metadata.country(countryCallingCode);\n\t\t\tcountryCallingCode = _metadata.countryCallingCode();\n\t\t}\n\t\tthis.countryCallingCode = countryCallingCode;\n\t\tthis.nationalNumber = nationalNumber;\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(PhoneNumber, [{\n\t\tkey: 'isPossible',\n\t\tvalue: function isPossible() {\n\t\t\treturn isPossibleNumber(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'isValid',\n\t\tvalue: function isValid() {\n\t\t\treturn isValidNumber(this, { v2: true }, this.metadata);\n\t\t}\n\n\t\t// // Is just an alias for `this.isValid() && this.country === country`.\n\t\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n\t\t// isValidForRegion(country) {\n\t\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n\t\t// }\n\n\t}, {\n\t\tkey: 'getType',\n\t\tvalue: function getType() {\n\t\t\treturn getNumberType(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format(_format, options) {\n\t\t\treturn formatNumber(this, _format, options ? _extends({}, options, { v2: true }) : { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'formatNational',\n\t\tvalue: function formatNational(options) {\n\t\t\treturn this.format('NATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'formatInternational',\n\t\tvalue: function formatInternational(options) {\n\t\t\treturn this.format('INTERNATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'getURI',\n\t\tvalue: function getURI(options) {\n\t\t\treturn this.format('RFC3966', options);\n\t\t}\n\t}]);\n\n\treturn PhoneNumber;\n}();\n\nexport default PhoneNumber;\n\n\nvar isCountryCode = function isCountryCode(value) {\n\treturn (/^[A-Z]{2}$/.test(value)\n\t);\n};\n//# sourceMappingURL=PhoneNumber.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\n\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { check_number_length_for_type } from './getNumberType_';\nimport { is_possible_number } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber';\n\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250;\n\n// This consists of the plus symbol, digits, and arabic-indic digits.\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']');\n\n// Regular expression of trailing characters that we want to remove.\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\n\n// `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\nexport default function parse(text) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\tmetadata = new Metadata(metadata);\n\n\t// Validate `defaultCountry`.\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\tthrow new Error('Unknown country: ' + options.defaultCountry);\n\t}\n\n\t// Parse the phone number.\n\n\tvar _parse_input = parse_input(text, options.v2),\n\t    formatted_phone_number = _parse_input.number,\n\t    ext = _parse_input.ext;\n\n\t// If the phone number is not viable then return nothing.\n\n\n\tif (!formatted_phone_number) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('NOT_A_NUMBER');\n\t\t}\n\t\treturn {};\n\t}\n\n\tvar _parse_phone_number = parse_phone_number(formatted_phone_number, options.defaultCountry, metadata),\n\t    country = _parse_phone_number.country,\n\t    nationalNumber = _parse_phone_number.national_number,\n\t    countryCallingCode = _parse_phone_number.countryCallingCode,\n\t    carrierCode = _parse_phone_number.carrierCode;\n\n\tif (!metadata.selectedCountry()) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\tif (nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n\t\t// Won't throw here because the regexp already demands length > 1.\n\t\t/* istanbul ignore if */\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_SHORT');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\t//\n\t// A sidenote:\n\t//\n\t// They say that sometimes national (significant) numbers\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n\t// Such numbers will just be discarded.\n\t//\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\tif (options.v2) {\n\t\tvar phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n\t\tif (country) {\n\t\t\tphoneNumber.country = country;\n\t\t}\n\t\tif (carrierCode) {\n\t\t\tphoneNumber.carrierCode = carrierCode;\n\t\t}\n\t\tif (ext) {\n\t\t\tphoneNumber.ext = ext;\n\t\t}\n\n\t\treturn phoneNumber;\n\t}\n\n\t// Check if national phone number pattern matches the number.\n\t// National number pattern is different for each country,\n\t// even for those ones which are part of the \"NANPA\" group.\n\tvar valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false;\n\n\tif (!options.extended) {\n\t\treturn valid ? result(country, nationalNumber, ext) : {};\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tcarrierCode: carrierCode,\n\t\tvalid: valid,\n\t\tpossible: valid ? true : options.extended === true && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\n\t\tphone: nationalNumber,\n\t\text: ext\n\t};\n}\n\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\nexport function extract_formatted_phone_number(text, v2) {\n\tif (!text) {\n\t\treturn;\n\t}\n\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\n\t\tif (v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\treturn;\n\t}\n\n\t// Attempt to extract a possible number from the string passed in\n\n\tvar starts_at = text.search(PHONE_NUMBER_START_PATTERN);\n\n\tif (starts_at < 0) {\n\t\treturn;\n\t}\n\n\treturn text\n\t// Trim everything to the left of the phone number\n\t.slice(starts_at)\n\t// Remove trailing non-numerical characters\n\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n\n// Strips any national prefix (such as 0, 1) present in the number provided.\n// \"Carrier codes\" are only used  in Colombia and Brazil,\n// and only when dialing within those countries from a mobile phone to a fixed line number.\nexport function strip_national_prefix_and_carrier_code(number, metadata) {\n\tif (!number || !metadata.nationalPrefixForParsing()) {\n\t\treturn { number: number };\n\t}\n\n\t// Attempt to parse the first digits as a national prefix\n\tvar national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n\tvar national_prefix_matcher = national_prefix_pattern.exec(number);\n\n\t// If no national prefix is present in the phone number,\n\t// but the national prefix is optional for this country,\n\t// then consider this phone number valid.\n\t//\n\t// Google's reference `libphonenumber` implementation\n\t// wouldn't recognize such phone numbers as valid,\n\t// but I think it would perfectly make sense\n\t// to consider such phone numbers as valid\n\t// because if a national phone number was originally\n\t// formatted without the national prefix\n\t// then it must be parseable back into the original national number.\n\t// In other words, `parse(format(number))`\n\t// must always be equal to `number`.\n\t//\n\tif (!national_prefix_matcher) {\n\t\treturn { number: number };\n\t}\n\n\tvar national_significant_number = void 0;\n\n\t// `national_prefix_for_parsing` capturing groups\n\t// (used only for really messy cases: Argentina, Brazil, Mexico, Somalia)\n\tvar captured_groups_count = national_prefix_matcher.length - 1;\n\n\t// If the national number tranformation is needed then do it.\n\t//\n\t// `national_prefix_matcher[captured_groups_count]` means that\n\t// the corresponding captured group is not empty.\n\t// It can be empty if it's optional.\n\t// Example: \"0?(?:...)?\" for Argentina.\n\t//\n\tif (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count]) {\n\t\tnational_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule());\n\t}\n\t// Else, no transformation is necessary,\n\t// and just strip the national prefix.\n\telse {\n\t\t\tnational_significant_number = number.slice(national_prefix_matcher[0].length);\n\t\t}\n\n\tvar carrierCode = void 0;\n\tif (captured_groups_count > 0) {\n\t\tcarrierCode = national_prefix_matcher[1];\n\t}\n\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\n\t//\n\t// // Verify the parsed national (significant) number for this country\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n\t// //\n\t// // If the original number (before stripping national prefix) was viable,\n\t// // and the resultant number is not, then prefer the original phone number.\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\n\t// // a national prefix and a leading digit of a valid national phone number,\n\t// // like `8` is the national prefix for Russia and both\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t// if (matchesEntirely(number, national_number_rule) &&\n\t// \t\t!matchesEntirely(national_significant_number, national_number_rule))\n\t// {\n\t// \treturn number\n\t// }\n\n\t// Return the parsed national (significant) number\n\treturn {\n\t\tnumber: national_significant_number,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nexport function find_country_code(country_calling_code, national_phone_number, metadata) {\n\t// Is always non-empty, because `country_calling_code` is always valid\n\tvar possible_countries = metadata.countryCallingCodes()[country_calling_code];\n\n\t// If there's just one country corresponding to the country code,\n\t// then just return it, without further phone number digits validation.\n\tif (possible_countries.length === 1) {\n\t\treturn possible_countries[0];\n\t}\n\n\treturn _find_country_code(possible_countries, national_phone_number, metadata.metadata);\n}\n\n// Changes `metadata` `country`.\nfunction _find_country_code(possible_countries, national_phone_number, metadata) {\n\tmetadata = new Metadata(metadata);\n\n\tfor (var _iterator = possible_countries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar country = _ref;\n\n\t\tmetadata.country(country);\n\n\t\t// Leading digits check would be the simplest one\n\t\tif (metadata.leadingDigits()) {\n\t\t\tif (national_phone_number && national_phone_number.search(metadata.leadingDigits()) === 0) {\n\t\t\t\treturn country;\n\t\t\t}\n\t\t}\n\t\t// Else perform full validation with all of those\n\t\t// fixed-line/mobile/etc regular expressions.\n\t\telse if (getNumberType({ phone: national_phone_number, country: country }, undefined, metadata.metadata)) {\n\t\t\t\treturn country;\n\t\t\t}\n\t}\n}\n\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parse_input(text, v2) {\n\t// Parse RFC 3966 phone number URI.\n\tif (text && text.indexOf('tel:') === 0) {\n\t\treturn parseRFC3966(text);\n\t}\n\n\tvar number = extract_formatted_phone_number(text, v2);\n\n\t// If the phone number is not viable, then abort.\n\tif (!number || !isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\t// Attempt to parse extension first, since it doesn't require region-specific\n\t// data and we want to have the non-normalised number here.\n\tvar with_extension_stripped = extractExtension(number);\n\tif (with_extension_stripped.ext) {\n\t\treturn with_extension_stripped;\n\t}\n\n\treturn { number: number };\n}\n\n/**\r\n * Creates `parse()` result object.\r\n */\nfunction result(country, national_number, ext) {\n\tvar result = {\n\t\tcountry: country,\n\t\tphone: national_number\n\t};\n\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\n\treturn result;\n}\n\n/**\r\n * Parses a viable phone number.\r\n * Returns `{ country, countryCallingCode, national_number }`.\r\n */\nfunction parse_phone_number(formatted_phone_number, default_country, metadata) {\n\tvar _extractCountryCallin = extractCountryCallingCode(formatted_phone_number, default_country, metadata.metadata),\n\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t    number = _extractCountryCallin.number;\n\n\tif (!number) {\n\t\treturn { countryCallingCode: countryCallingCode };\n\t}\n\n\tvar country = void 0;\n\n\tif (countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t} else if (default_country) {\n\t\tmetadata.country(default_country);\n\t\tcountry = default_country;\n\t\tcountryCallingCode = getCountryCallingCode(default_country, metadata.metadata);\n\t} else return {};\n\n\tvar _parse_national_numbe = parse_national_number(number, metadata),\n\t    national_number = _parse_national_numbe.national_number,\n\t    carrier_code = _parse_national_numbe.carrier_code;\n\n\t// Sometimes there are several countries\n\t// corresponding to the same country phone code\n\t// (e.g. NANPA countries all having `1` country phone code).\n\t// Therefore, to reliably determine the exact country,\n\t// national (significant) number should have been parsed first.\n\t//\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\n\t// get their countries populated with the full set of\n\t// \"phone number type\" regular expressions.\n\t//\n\n\n\tvar exactCountry = find_country_code(countryCallingCode, national_number, metadata);\n\tif (exactCountry) {\n\t\tcountry = exactCountry;\n\t\tmetadata.country(country);\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tnational_number: national_number,\n\t\tcarrierCode: carrier_code\n\t};\n}\n\nfunction parse_national_number(number, metadata) {\n\tvar national_number = parseIncompletePhoneNumber(number);\n\tvar carrier_code = void 0;\n\n\t// Parsing national prefixes and carrier codes\n\t// is only required for local phone numbers\n\t// but some people don't understand that\n\t// and sometimes write international phone numbers\n\t// with national prefixes (or maybe even carrier codes).\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n\t// Google's original library forgives such mistakes\n\t// and so does this library, because it has been requested:\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(national_number, metadata),\n\t    potential_national_number = _strip_national_prefi.number,\n\t    carrierCode = _strip_national_prefi.carrierCode;\n\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n\tif (metadata.possibleLengths()) {\n\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t// carrier code be long enough to be a possible length for the region.\n\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t// a valid short number.\n\t\tswitch (check_number_length_for_type(potential_national_number, undefined, metadata)) {\n\t\t\tcase 'TOO_SHORT':\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\tcase 'INVALID_LENGTH':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnational_number = potential_national_number;\n\t\t\t\tcarrier_code = carrierCode;\n\t\t}\n\t} else {\n\t\t// If the original number (before stripping national prefix) was viable,\n\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t// like `8` is the national prefix for Russia and both\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\tif (matchesEntirely(national_number, metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, metadata.nationalNumberPattern())) {\n\t\t\t// Keep the number without stripping national prefix.\n\t\t} else {\n\t\t\tnational_number = potential_national_number;\n\t\t\tcarrier_code = carrierCode;\n\t\t}\n\t}\n\n\treturn {\n\t\tnational_number: national_number,\n\t\tcarrier_code: carrier_code\n\t};\n}\n\n// Determines the country for a given (possibly incomplete) phone number.\n// export function get_country_from_phone_number(number, metadata)\n// {\n// \treturn parse_phone_number(number, null, metadata).country\n// }\n\n// Parses a formatted phone number\n// and returns `{ countryCallingCode, number }`\n// where `number` is just the \"number\" part\n// which is left after extracting `countryCallingCode`\n// and is not necessarily a \"national (significant) number\"\n// and might as well contain national prefix.\n//\nexport function extractCountryCallingCode(number, country, metadata) {\n\tnumber = parseIncompletePhoneNumber(number);\n\n\tif (!number) {\n\t\treturn {};\n\t}\n\n\t// If this is not an international phone number,\n\t// then don't extract country phone code.\n\tif (number[0] !== '+') {\n\t\t// Convert an \"out-of-country\" dialing phone number\n\t\t// to a proper international phone number.\n\t\tvar numberWithoutIDD = stripIDDPrefix(number, country, metadata);\n\n\t\t// If an IDD prefix was stripped then\n\t\t// convert the number to international one\n\t\t// for subsequent parsing.\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\n\t\t\tnumber = '+' + numberWithoutIDD;\n\t\t} else {\n\t\t\treturn { number: number };\n\t\t}\n\t}\n\n\t// Fast abortion: country codes do not begin with a '0'\n\tif (number[1] === '0') {\n\t\treturn {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\t// The thing with country phone codes\n\t// is that they are orthogonal to each other\n\t// i.e. there's no such country phone code A\n\t// for which country phone code B exists\n\t// where B starts with A.\n\t// Therefore, while scanning digits,\n\t// if a valid country code is found,\n\t// that means that it is the country code.\n\t//\n\tvar i = 2;\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n\t\tvar countryCallingCode = number.slice(1, i);\n\n\t\tif (metadata.countryCallingCodes()[countryCallingCode]) {\n\t\t\treturn {\n\t\t\t\tcountryCallingCode: countryCallingCode,\n\t\t\t\tnumber: number.slice(i)\n\t\t\t};\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn {};\n}\n//# sourceMappingURL=parse_.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parseNumber from './parse_';\n\nexport default function parsePhoneNumber(arg_1, arg_2, arg_3, arg_4) {\n\tvar _sort_out_arguments = sort_out_arguments(arg_1, arg_2, arg_3, arg_4),\n\t    text = _sort_out_arguments.text,\n\t    options = _sort_out_arguments.options,\n\t    metadata = _sort_out_arguments.metadata;\n\n\treturn parseNumber(text, _extends({}, options, { v2: true }), metadata);\n}\n\nexport function sort_out_arguments(arg_1, arg_2, arg_3, arg_4) {\n\tvar text = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `parsePhoneNumber('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\ttext = arg_1;\n\t} else throw new TypeError('A text for parsing must be a string.');\n\n\t// If \"default country\" argument is being passed then move it to `options`.\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\tif (!arg_2 || typeof arg_2 === 'string') {\n\t\tif (arg_4) {\n\t\t\toptions = arg_3;\n\t\t\tmetadata = arg_4;\n\t\t} else {\n\t\t\toptions = undefined;\n\t\t\tmetadata = arg_3;\n\t\t}\n\n\t\tif (arg_2) {\n\t\t\toptions = _extends({ defaultCountry: arg_2 }, options);\n\t\t}\n\t}\n\t// `parsePhoneNumber('+78005553535', [options], metadata)`.\n\telse if (isObject(arg_2)) {\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t} else throw new Error('Invalid second argument: ' + arg_2);\n\n\treturn {\n\t\ttext: text,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Otherwise istanbul would show this as \"branch not covered\".\n/* istanbul ignore next */\nvar isObject = function isObject(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","import parsePhoneNumber from './parsePhoneNumber';\nimport ParseError from './ParseError';\n\nexport default function parsePhoneNumberFromString() {\n\ttry {\n\t\treturn parsePhoneNumber.apply(this, arguments);\n\t} catch (error) {\n\t\t/* istanbul ignore else */\n\t\tif (error instanceof ParseError) {\n\t\t\t///\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n\tif (lower < 0 || upper <= 0 || upper < lower) {\n\t\tthrow new TypeError();\n\t}\n\treturn \"{\" + lower + \",\" + upper + \"}\";\n}\n\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\nexport function trimAfterFirstMatch(regexp, string) {\n\tvar index = string.search(regexp);\n\n\tif (index >= 0) {\n\t\treturn string.slice(0, index);\n\t}\n\n\treturn string;\n}\n\nexport function startsWith(string, substring) {\n\treturn string.indexOf(substring) === 0;\n}\n\nexport function endsWith(string, substring) {\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}\n//# sourceMappingURL=util.js.map","// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\n\nvar _pZ = ' \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000';\nexport var pZ = '[' + _pZ + ']';\nexport var PZ = '[^' + _pZ + ']';\n\nexport var _pN = '0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19';\n// const pN = `[${_pN}]`\n\nvar _pNd = '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19';\nexport var pNd = '[' + _pNd + ']';\n\nexport var _pL = 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC';\nvar pL = '[' + _pL + ']';\nvar pL_regexp = new RegExp(pL);\n\nvar _pSc = '$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6';\nvar pSc = '[' + _pSc + ']';\nvar pSc_regexp = new RegExp(pSc);\n\nvar _pMn = '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26';\nvar pMn = '[' + _pMn + ']';\nvar pMn_regexp = new RegExp(pMn);\n\nvar _InBasic_Latin = '\\0-\\x7F';\nvar _InLatin_1_Supplement = '\\x80-\\xFF';\nvar _InLatin_Extended_A = '\\u0100-\\u017F';\nvar _InLatin_Extended_Additional = '\\u1E00-\\u1EFF';\nvar _InLatin_Extended_B = '\\u0180-\\u024F';\nvar _InCombining_Diacritical_Marks = '\\u0300-\\u036F';\n\nvar latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');\n\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\nexport function isLatinLetter(letter) {\n  // Combining marks are a subset of non-spacing-mark.\n  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\n    return false;\n  }\n\n  return latinLetterRegexp.test(letter);\n}\n\nexport function isInvalidPunctuationSymbol(character) {\n  return character === '%' || pSc_regexp.test(character);\n}\n//# sourceMappingURL=utf-8.js.map","import isValidNumber from '../validate_';\nimport parseDigits from '../parseDigits';\n\nimport { startsWith, endsWith } from './util';\n\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    }\n\n    // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n    return true;\n  },\n\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped);\n  },\n\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent);\n  }\n};\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        }\n        // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n      } else if (parseDigits(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n  if (metadata == null) {\n    return true;\n  }\n\n  // Check if a national prefix should be present when formatting this number.\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber);\n\n  // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    }\n\n    // Normalize the remainder.\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput());\n\n    // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  }\n\n  // Now look for a second one.\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  }\n\n  // If the first slash is after the country calling code, this is permitted.\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups) {\n  // TODO: Evaluate how this works for other locales (testing has been limited to NANPA regions)\n  // and optimise if necessary.\n  var normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */);\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  }\n\n  // If this didn't pass, see if there are any alternate formats, and try them instead.\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n\n  if (alternateFormats) {\n    for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var alternateFormat = _ref;\n\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together.\r\n */\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  }\n\n  // This will be in the format +CC-DG;ext=EXT where DG represents groups of digits.\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata);\n\n  // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n  var endIndex = rfc3966Format.indexOf(';');\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  }\n\n  // The country-code will have a '-' following it.\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN);\n\n  // Set this to the last group, skipping it if the number has an extension.\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1;\n\n  // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  }\n\n  // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  }\n\n  // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  }\n\n  // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n    if (fromIndex < 0) {\n      return false;\n    }\n    // Moves {@code fromIndex} forward.\n    fromIndex += formattedNumberGroups[i].length();\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  }\n\n  // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}\n//# sourceMappingURL=Leniency.js.map","import { trimAfterFirstMatch } from './util';\n\n// Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\n\nexport default function parsePreCandidate(candidate) {\n\t// Check for extra numbers at the end.\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\n\t// from split notations (+41 79 123 45 67 / 68).\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate);\n}\n//# sourceMappingURL=parsePreCandidate.js.map","// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/;\n\n// Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\n\nexport default function isValidPreCandidate(candidate, offset, text) {\n\t// Skip a match that is more likely to be a date.\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\n\t\treturn false;\n\t}\n\n\t// Skip potential time-stamps.\n\tif (TIME_STAMPS.test(candidate)) {\n\t\tvar followingText = text.slice(offset + candidate.length);\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=isValidPreCandidate.js.map","// Copy-pasted from `PhoneNumberMatcher.js`.\n\nimport { PLUS_CHARS } from '../constants';\nimport { limit } from './util';\n\nimport { isLatinLetter, isInvalidPunctuationSymbol } from './utf-8';\n\nvar OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B';\nvar CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D';\nvar NON_PARENS = '[^' + OPENING_PARENS + CLOSING_PARENS + ']';\n\nexport var LEAD_CLASS = '[' + OPENING_PARENS + PLUS_CHARS + ']';\n\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS);\n\n// Limit on the number of pairs of brackets in a phone number.\nvar BRACKET_PAIR_LIMIT = limit(0, 3);\n\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\n\nexport default function isValidCandidate(candidate, offset, text, leniency) {\n\t// Check the candidate doesn't contain any formatting\n\t// which would indicate that it really isn't a phone number.\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n\t\treturn;\n\t}\n\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\tif (leniency !== 'POSSIBLE') {\n\t\t// If the candidate is not at the start of the text,\n\t\t// and does not start with phone-number punctuation,\n\t\t// check the previous character.\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n\t\t\tvar previousChar = text[offset - 1];\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\n\t\t\tif (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tvar lastCharIndex = offset + candidate.length;\n\t\tif (lastCharIndex < text.length) {\n\t\t\tvar nextChar = text[lastCharIndex];\n\t\t\tif (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=isValidCandidate.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\n\nimport PhoneNumber from './PhoneNumber';\n\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants';\n\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension';\n\nimport { limit, trimAfterFirstMatch } from './findNumbers/util';\n\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8';\n\nimport Leniency from './findNumbers/Leniency';\nimport parsePreCandidate from './findNumbers/parsePreCandidate';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate';\n\nimport parseNumber from './parse_';\n\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\nvar INNER_MATCHES = [\n// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/',\n\n// Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)',\n\n// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n'(?:' + pZ + '-|-' + pZ + ')' + pZ + '*(.+)',\n\n// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n'[\\u2012-\\u2015\\uFF0D]' + pZ + '*(.+)',\n\n// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n'\\\\.+' + pZ + '*([^.]+)',\n\n// Breaks on space - e.g. \"3324451234 8002341234\"\npZ + '+(' + PZ + '+)'];\n\n// Limit on the number of leading (plus) characters.\nvar leadLimit = limit(0, 2);\n\n// Limit on the number of consecutive punctuation characters.\nvar punctuationLimit = limit(0, 4);\n\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE;\n\n// Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\nvar blockLimit = limit(0, digitBlockLimit);\n\n/* A punctuation sequence allowing white space. */\nvar punctuation = '[' + VALID_PUNCTUATION + ']' + punctuationLimit;\n\n// A digits block without punctuation.\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?';\n\n// Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\nvar UNWANTED_END_CHAR_PATTERN = new RegExp('[^' + _pN + _pL + '#]+$');\n\nvar NON_DIGITS_PATTERN = /(\\D+)/;\n\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = function () {\n\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n\n  /** The iteration tristate. */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments[2];\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    this.state = 'NOT_READY';\n    this.searchIndex = 0;\n\n    options = _extends({}, options, {\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n\n    /** The degree of validation requested. */\n    this.leniency = Leniency[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError('Unknown leniency: ' + options.leniency + '.');\n    }\n\n    /** The maximum number of retries after matching an invalid number. */\n    this.maxTries = options.maxTries;\n\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n  }\n\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: 'find',\n    value: function find() // (index)\n    {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n\n      var matches = void 0;\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n\n        candidate = parsePreCandidate(candidate);\n\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match =\n          // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text)\n          // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country, match.phone, this.metadata);\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n\n    /**\r\n     * Attempts to extract a match from `candidate`\r\n     * if the whole candidate does not qualify as a match.\r\n     */\n\n  }, {\n    key: 'extractInnerMatch',\n    value: function extractInnerMatch(candidate, offset, text) {\n      for (var _iterator = INNER_MATCHES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var innerMatchPattern = _ref;\n\n        var isFirstMatch = true;\n        var matches = void 0;\n        var possibleInnerMatch = new RegExp(innerMatchPattern, 'g');\n        while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidate.slice(0, matches.index));\n\n            var _match = this.parseAndVerify(_group, offset, text);\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, matches[1]);\n\n          // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a group match start index,\n          // therefore using the overall match start index `matches.index`.\n          var match = this.parseAndVerify(group, offset + matches.index, text);\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: 'parseAndVerify',\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          country: number.country,\n          phone: number.phone\n        };\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: 'hasNext',\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: 'next',\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      }\n\n      // Don't retain that memory any longer than necessary.\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexport default PhoneNumberMatcher;\n//# sourceMappingURL=PhoneNumberMatcher.js.map","import _findNumbers from './findNumbers_';\nimport { sort_out_arguments } from './parsePhoneNumber';\n\nexport default function findNumbers(arg_1, arg_2, arg_3, arg_4) {\n\tvar _sort_out_arguments = sort_out_arguments(arg_1, arg_2, arg_3, arg_4),\n\t    text = _sort_out_arguments.text,\n\t    options = _sort_out_arguments.options,\n\t    metadata = _sort_out_arguments.metadata;\n\n\treturn _findNumbers(text, options, metadata);\n}\n//# sourceMappingURL=findNumbers.js.map","import PhoneNumberMatcher from './PhoneNumberMatcher';\n\nexport default function findNumbers(text, options, metadata) {\n\tvar matcher = new PhoneNumberMatcher(text, options, metadata);\n\tvar results = [];\n\twhile (matcher.hasNext()) {\n\t\tresults.push(matcher.next());\n\t}\n\treturn results;\n}\n//# sourceMappingURL=findNumbers_.js.map","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { sort_out_arguments } from './parsePhoneNumber';\nimport PhoneNumberMatcher from './PhoneNumberMatcher';\n\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\nexport default function searchNumbers(arg_1, arg_2, arg_3, arg_4) {\n\tvar _sort_out_arguments = sort_out_arguments(arg_1, arg_2, arg_3, arg_4),\n\t    text = _sort_out_arguments.text,\n\t    options = _sort_out_arguments.options,\n\t    metadata = _sort_out_arguments.metadata;\n\n\tvar matcher = new PhoneNumberMatcher(text, options, metadata);\n\n\treturn _defineProperty({}, Symbol.iterator, function () {\n\t\treturn {\n\t\t\tnext: function next() {\n\t\t\t\tif (matcher.hasNext()) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: matcher.next()\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tdone: true\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t});\n}\n//# sourceMappingURL=searchNumbers.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\nimport Metadata from './metadata';\n\nimport PhoneNumber from './PhoneNumber';\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { matchesEntirely } from './util';\n\nimport { extractCountryCallingCode, extract_formatted_phone_number, find_country_code, strip_national_prefix_and_carrier_code } from './parse_';\n\nimport { FIRST_GROUP_PATTERN, format_national_number_using_format, changeInternationalFormatStyle } from './format_';\n\nimport { check_number_length_for_type } from './getNumberType_';\n\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nvar DUMMY_DIGIT = '9';\n// I don't know why is it exactly `15`\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15;\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH);\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER);\n\n// Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true;\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\[([^\\[\\]])*\\]/g\n\t);\n};\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\d(?=[^,}][^,}])/g\n\t);\n};\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$');\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar VALID_INCOMPLETE_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\nvar VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i');\n\nvar AsYouType = function () {\n\n\t/**\r\n  * @param {string} [country_code] - The default country used for parsing non-international phone numbers.\r\n  * @param {Object} metadata\r\n  */\n\tfunction AsYouType(country_code, metadata) {\n\t\t_classCallCheck(this, AsYouType);\n\n\t\tthis.options = {};\n\n\t\tthis.metadata = new Metadata(metadata);\n\n\t\tif (country_code && this.metadata.hasCountry(country_code)) {\n\t\t\tthis.default_country = country_code;\n\t\t}\n\n\t\tthis.reset();\n\t}\n\t// Not setting `options` to a constructor argument\n\t// not to break backwards compatibility\n\t// for older versions of the library.\n\n\n\t_createClass(AsYouType, [{\n\t\tkey: 'input',\n\t\tvalue: function input(text) {\n\t\t\t// Parse input\n\n\t\t\tvar extracted_number = extract_formatted_phone_number(text) || '';\n\n\t\t\t// Special case for a lone '+' sign\n\t\t\t// since it's not considered a possible phone number.\n\t\t\tif (!extracted_number) {\n\t\t\t\tif (text && text.indexOf('+') >= 0) {\n\t\t\t\t\textracted_number = '+';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Validate possible first part of a phone number\n\t\t\tif (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number)) {\n\t\t\t\treturn this.current_output;\n\t\t\t}\n\n\t\t\treturn this.process_input(parseIncompletePhoneNumber(extracted_number));\n\t\t}\n\t}, {\n\t\tkey: 'process_input',\n\t\tvalue: function process_input(input) {\n\t\t\t// If an out of position '+' sign detected\n\t\t\t// (or a second '+' sign),\n\t\t\t// then just drop it from the input.\n\t\t\tif (input[0] === '+') {\n\t\t\t\tif (!this.parsed_input) {\n\t\t\t\t\tthis.parsed_input += '+';\n\n\t\t\t\t\t// If a default country was set\n\t\t\t\t\t// then reset it because an explicitly international\n\t\t\t\t\t// phone number is being entered\n\t\t\t\t\tthis.reset_countriness();\n\t\t\t\t}\n\n\t\t\t\tinput = input.slice(1);\n\t\t\t}\n\n\t\t\t// Raw phone number\n\t\t\tthis.parsed_input += input;\n\n\t\t\t// // Reset phone number validation state\n\t\t\t// this.valid = false\n\n\t\t\t// Add digits to the national number\n\t\t\tthis.national_number += input;\n\n\t\t\t// TODO: Deprecated: rename `this.national_number`\n\t\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\n\n\t\t\t// Try to format the parsed input\n\n\t\t\tif (this.is_international()) {\n\t\t\t\tif (!this.countryCallingCode) {\n\t\t\t\t\t// Extract country calling code from the digits entered so far.\n\n\t\t\t\t\t// There must be some digits in order to extract anything from them.\n\t\t\t\t\tif (!this.national_number) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsed_input;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If one looks at country phone codes\n\t\t\t\t\t// then he can notice that no one country phone code\n\t\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t\t// then it means that this is the country code.\n\n\t\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t\t// then just return the raw phone number,\n\t\t\t\t\t// because it has no way of knowing\n\t\t\t\t\t// how to format the phone number so far.\n\t\t\t\t\tif (!this.extract_country_calling_code()) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsed_input;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Initialize country-specific data\n\t\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t\t\tthis.reset_format();\n\t\t\t\t\tthis.determine_the_country();\n\t\t\t\t}\n\t\t\t\t// `this.country` could be `undefined`,\n\t\t\t\t// for instance, when there is ambiguity\n\t\t\t\t// in a form of several different countries\n\t\t\t\t// each corresponding to the same country phone code\n\t\t\t\t// (e.g. NANPA: USA, Canada, etc),\n\t\t\t\t// and there's not enough digits entered\n\t\t\t\t// to reliably determine the country\n\t\t\t\t// the phone number belongs to.\n\t\t\t\t// Therefore, in cases of such ambiguity,\n\t\t\t\t// each time something is input,\n\t\t\t\t// try to determine the country\n\t\t\t\t// (if it's not determined yet).\n\t\t\t\telse if (!this.country) {\n\t\t\t\t\t\tthis.determine_the_country();\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t\t// because a longer national prefix might be available at some point in time.\n\n\t\t\t\tvar previous_national_prefix = this.national_prefix;\n\t\t\t\tthis.national_number = this.national_prefix + this.national_number;\n\n\t\t\t\t// Possibly extract a national prefix\n\t\t\t\tthis.extract_national_prefix();\n\n\t\t\t\tif (this.national_prefix !== previous_national_prefix) {\n\t\t\t\t\t// National number has changed\n\t\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t\t// therefore national number has changed\n\t\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t\t// (and leading digits matching state)\n\t\t\t\t\tthis.matching_formats = undefined;\n\t\t\t\t\tthis.reset_format();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if (!this.should_format())\n\t\t\t// {\n\t\t\t// \treturn this.format_as_non_formatted_number()\n\t\t\t// }\n\n\t\t\tif (!this.national_number) {\n\t\t\t\treturn this.format_as_non_formatted_number();\n\t\t\t}\n\n\t\t\t// Check the available phone number formats\n\t\t\t// based on the currently available leading digits.\n\t\t\tthis.match_formats_by_leading_digits();\n\n\t\t\t// Format the phone number (given the next digits)\n\t\t\tvar formatted_national_phone_number = this.format_national_phone_number(input);\n\n\t\t\t// If the phone number could be formatted,\n\t\t\t// then return it, possibly prepending with country phone code\n\t\t\t// (for international phone numbers only)\n\t\t\tif (formatted_national_phone_number) {\n\t\t\t\treturn this.full_phone_number(formatted_national_phone_number);\n\t\t\t}\n\n\t\t\t// If the phone number couldn't be formatted,\n\t\t\t// then just fall back to the raw phone number.\n\t\t\treturn this.format_as_non_formatted_number();\n\t\t}\n\t}, {\n\t\tkey: 'format_as_non_formatted_number',\n\t\tvalue: function format_as_non_formatted_number() {\n\t\t\t// Strip national prefix for incorrectly inputted international phones.\n\t\t\tif (this.is_international() && this.countryCallingCode) {\n\t\t\t\treturn '+' + this.countryCallingCode + this.national_number;\n\t\t\t}\n\n\t\t\treturn this.parsed_input;\n\t\t}\n\t}, {\n\t\tkey: 'format_national_phone_number',\n\t\tvalue: function format_national_phone_number(next_digits) {\n\t\t\t// Format the next phone number digits\n\t\t\t// using the previously chosen phone number format.\n\t\t\t//\n\t\t\t// This is done here because if `attempt_to_format_complete_phone_number`\n\t\t\t// was placed before this call then the `template`\n\t\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t\t//\n\t\t\tvar national_number_formatted_with_previous_format = void 0;\n\t\t\tif (this.chosen_format) {\n\t\t\t\tnational_number_formatted_with_previous_format = this.format_next_national_number_digits(next_digits);\n\t\t\t}\n\n\t\t\t// See if the input digits can be formatted properly already. If not,\n\t\t\t// use the results from format_next_national_number_digits(), which does formatting\n\t\t\t// based on the formatting pattern chosen.\n\n\t\t\tvar formatted_number = this.attempt_to_format_complete_phone_number();\n\n\t\t\t// Just because a phone number doesn't have a suitable format\n\t\t\t// that doesn't mean that the phone is invalid\n\t\t\t// because phone number formats only format phone numbers,\n\t\t\t// they don't validate them and some (rare) phone numbers\n\t\t\t// are meant to stay non-formatted.\n\t\t\tif (formatted_number) {\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\n\t\t\t// For some phone number formats national prefix\n\n\t\t\t// If the previously chosen phone number format\n\t\t\t// didn't match the next (current) digit being input\n\t\t\t// (leading digits pattern didn't match).\n\t\t\tif (this.choose_another_format()) {\n\t\t\t\t// And a more appropriate phone number format\n\t\t\t\t// has been chosen for these `leading digits`,\n\t\t\t\t// then format the national phone number (so far)\n\t\t\t\t// using the newly selected phone number pattern.\n\n\t\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t\t// the supplied national number\n\t\t\t\t// using the selected phone number pattern.\n\n\t\t\t\treturn this.reformat_national_number();\n\t\t\t}\n\n\t\t\t// If could format the next (current) digit\n\t\t\t// using the previously chosen phone number format\n\t\t\t// then return the formatted number so far.\n\n\t\t\t// If no new phone number format could be chosen,\n\t\t\t// and couldn't format the supplied national number\n\t\t\t// using the selected phone number pattern,\n\t\t\t// then it will return `undefined`.\n\n\t\t\treturn national_number_formatted_with_previous_format;\n\t\t}\n\t}, {\n\t\tkey: 'reset',\n\t\tvalue: function reset() {\n\t\t\t// Input stripped of non-phone-number characters.\n\t\t\t// Can only contain a possible leading '+' sign and digits.\n\t\t\tthis.parsed_input = '';\n\n\t\t\tthis.current_output = '';\n\n\t\t\t// This contains the national prefix that has been extracted. It contains only\n\t\t\t// digits without formatting.\n\t\t\tthis.national_prefix = '';\n\n\t\t\tthis.national_number = '';\n\t\t\tthis.carrierCode = '';\n\n\t\t\tthis.reset_countriness();\n\n\t\t\tthis.reset_format();\n\n\t\t\t// this.valid = false\n\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'reset_country',\n\t\tvalue: function reset_country() {\n\t\t\tif (this.is_international()) {\n\t\t\t\tthis.country = undefined;\n\t\t\t} else {\n\t\t\t\tthis.country = this.default_country;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'reset_countriness',\n\t\tvalue: function reset_countriness() {\n\t\t\tthis.reset_country();\n\n\t\t\tif (this.default_country && !this.is_international()) {\n\t\t\t\tthis.metadata.country(this.default_country);\n\t\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode();\n\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t} else {\n\t\t\t\tthis.metadata.country(undefined);\n\t\t\t\tthis.countryCallingCode = undefined;\n\n\t\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\t\t\t\tthis.available_formats = [];\n\t\t\t\tthis.matching_formats = undefined;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'reset_format',\n\t\tvalue: function reset_format() {\n\t\t\tthis.chosen_format = undefined;\n\t\t\tthis.template = undefined;\n\t\t\tthis.partially_populated_template = undefined;\n\t\t\tthis.last_match_position = -1;\n\t\t}\n\n\t\t// Format each digit of national phone number (so far)\n\t\t// using the newly selected phone number pattern.\n\n\t}, {\n\t\tkey: 'reformat_national_number',\n\t\tvalue: function reformat_national_number() {\n\t\t\t// Format each digit of national phone number (so far)\n\t\t\t// using the selected phone number pattern.\n\t\t\treturn this.format_next_national_number_digits(this.national_number);\n\t\t}\n\t}, {\n\t\tkey: 'initialize_phone_number_formats_for_this_country_calling_code',\n\t\tvalue: function initialize_phone_number_formats_for_this_country_calling_code() {\n\t\t\t// Get all \"eligible\" phone number formats for this country\n\t\t\tthis.available_formats = this.metadata.formats().filter(function (format) {\n\t\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n\t\t\t});\n\n\t\t\tthis.matching_formats = undefined;\n\t\t}\n\t}, {\n\t\tkey: 'match_formats_by_leading_digits',\n\t\tvalue: function match_formats_by_leading_digits() {\n\t\t\tvar leading_digits = this.national_number;\n\n\t\t\t// \"leading digits\" pattern list starts with a\n\t\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\n\t\t\t// So, after a user inputs 3 digits of a national (significant) phone number\n\t\t\t// this national (significant) number can already be formatted.\n\t\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\n\t\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n\n\t\t\t// This implementation is different from Google's\n\t\t\t// in that it searches for a fitting format\n\t\t\t// even if the user has entered less than\n\t\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n\t\t\t// Because some leading digits patterns already match for a single first digit.\n\t\t\tvar index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH;\n\t\t\tif (index_of_leading_digits_pattern < 0) {\n\t\t\t\tindex_of_leading_digits_pattern = 0;\n\t\t\t}\n\n\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\n\t\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n\t\t\t// then format matching starts narrowing down the list of possible formats\n\t\t\t// (only previously matched formats are considered for next digits).\n\t\t\tvar available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats;\n\t\t\tthis.had_enough_leading_digits = this.should_format();\n\n\t\t\tthis.matching_formats = available_formats.filter(function (format) {\n\t\t\t\tvar leading_digits_patterns_count = format.leadingDigitsPatterns().length;\n\n\t\t\t\t// If this format is not restricted to a certain\n\t\t\t\t// leading digits pattern then it fits.\n\t\t\t\tif (leading_digits_patterns_count === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tvar leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1);\n\t\t\t\tvar leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index];\n\n\t\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\t\treturn new RegExp('^(' + leading_digits_pattern + ')').test(leading_digits);\n\t\t\t});\n\n\t\t\t// If there was a phone number format chosen\n\t\t\t// and it no longer holds given the new leading digits then reset it.\n\t\t\t// The test for this `if` condition is marked as:\n\t\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\n\t\t\t// To construct a valid test case for this one can find a country\n\t\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n\t\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\t\t\tif (this.chosen_format && this.matching_formats.indexOf(this.chosen_format) === -1) {\n\t\t\t\tthis.reset_format();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'should_format',\n\t\tvalue: function should_format() {\n\t\t\t// Start matching any formats at all when the national number\n\t\t\t// entered so far is at least 3 digits long,\n\t\t\t// otherwise format matching would give false negatives\n\t\t\t// like when the digits entered so far are `2`\n\t\t\t// and the leading digits pattern is `21` –\n\t\t\t// it's quite obvious in this case that the format could be the one\n\t\t\t// but due to the absence of further digits it would give false negative.\n\t\t\t//\n\t\t\t// Presumably the limitation of \"3 digits min\"\n\t\t\t// is imposed to exclude false matches,\n\t\t\t// e.g. when there are two different formats\n\t\t\t// each one fitting one or two leading digits being input.\n\t\t\t// But for this case I would propose a specific `if/else` condition.\n\t\t\t//\n\t\t\treturn this.national_number.length >= MIN_LEADING_DIGITS_LENGTH;\n\t\t}\n\n\t\t// Check to see if there is an exact pattern match for these digits. If so, we\n\t\t// should use this instead of any other formatting template whose\n\t\t// `leadingDigitsPattern` also matches the input.\n\n\t}, {\n\t\tkey: 'attempt_to_format_complete_phone_number',\n\t\tvalue: function attempt_to_format_complete_phone_number() {\n\t\t\tfor (var _iterator = this.matching_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\t\tvar _ref;\n\n\t\t\t\tif (_isArray) {\n\t\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t\t_ref = _iterator[_i++];\n\t\t\t\t} else {\n\t\t\t\t\t_i = _iterator.next();\n\t\t\t\t\tif (_i.done) break;\n\t\t\t\t\t_ref = _i.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref;\n\n\t\t\t\tvar matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\n\t\t\t\tif (!matcher.test(this.national_number)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!this.is_format_applicable(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// To leave the formatter in a consistent state\n\t\t\t\tthis.reset_format();\n\t\t\t\tthis.chosen_format = format;\n\n\t\t\t\tvar formatted_number = format_national_number_using_format(this.national_number, format, this.is_international(), this.national_prefix !== '', this.metadata);\n\n\t\t\t\t// Special handling for NANPA countries for AsYouType formatter.\n\t\t\t\t// Copied from Google's `libphonenumber`:\n\t\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\t\t\t\tif (this.national_prefix && this.countryCallingCode === '1') {\n\t\t\t\t\tformatted_number = '1 ' + formatted_number;\n\t\t\t\t}\n\n\t\t\t\t// Set `this.template` and `this.partially_populated_template`.\n\t\t\t\t//\n\t\t\t\t// `else` case doesn't ever happen\n\t\t\t\t// with the current metadata,\n\t\t\t\t// but just in case.\n\t\t\t\t//\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (this.create_formatting_template(format)) {\n\t\t\t\t\t// Populate `this.partially_populated_template`\n\t\t\t\t\tthis.reformat_national_number();\n\t\t\t\t} else {\n\t\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\n\t\t\t\t\tvar full_number = this.full_phone_number(formatted_number);\n\t\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n\t\t\t\t\tthis.partially_populated_template = full_number;\n\t\t\t\t}\n\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\t\t}\n\n\t\t// Prepends `+CountryCode` in case of an international phone number\n\n\t}, {\n\t\tkey: 'full_phone_number',\n\t\tvalue: function full_phone_number(formatted_national_number) {\n\t\t\tif (this.is_international()) {\n\t\t\t\treturn '+' + this.countryCallingCode + ' ' + formatted_national_number;\n\t\t\t}\n\n\t\t\treturn formatted_national_number;\n\t\t}\n\n\t\t// Extracts the country calling code from the beginning\n\t\t// of the entered `national_number` (so far),\n\t\t// and places the remaining input into the `national_number`.\n\n\t}, {\n\t\tkey: 'extract_country_calling_code',\n\t\tvalue: function extract_country_calling_code() {\n\t\t\tvar _extractCountryCallin = extractCountryCallingCode(this.parsed_input, this.default_country, this.metadata.metadata),\n\t\t\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t\t\t    number = _extractCountryCallin.number;\n\n\t\t\tif (!countryCallingCode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.countryCallingCode = countryCallingCode;\n\n\t\t\t// Sometimes people erroneously write national prefix\n\t\t\t// as part of an international number, e.g. +44 (0) ....\n\t\t\t// This violates the standards for international phone numbers,\n\t\t\t// so \"As You Type\" formatter assumes no national prefix\n\t\t\t// when parsing a phone number starting from `+`.\n\t\t\t// Even if it did attempt to filter-out that national prefix\n\t\t\t// it would look weird for a user trying to enter a digit\n\t\t\t// because from user's perspective the keyboard \"wouldn't be working\".\n\t\t\tthis.national_number = number;\n\n\t\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t\t\treturn this.metadata.selectedCountry() !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'extract_national_prefix',\n\t\tvalue: function extract_national_prefix() {\n\t\t\tthis.national_prefix = '';\n\n\t\t\tif (!this.metadata.selectedCountry()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only strip national prefixes for non-international phone numbers\n\t\t\t// because national prefixes can't be present in international phone numbers.\n\t\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\t\t\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(this.national_number, this.metadata),\n\t\t\t    potential_national_number = _strip_national_prefi.number,\n\t\t\t    carrierCode = _strip_national_prefi.carrierCode;\n\n\t\t\tif (carrierCode) {\n\t\t\t\tthis.carrierCode = carrierCode;\n\t\t\t}\n\n\t\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t\t// carrier code be long enough to be a possible length for the region.\n\t\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t\t// a valid short number.\n\t\t\tif (!this.metadata.possibleLengths() || this.is_possible_number(this.national_number) && !this.is_possible_number(potential_national_number)) {\n\t\t\t\t// Verify the parsed national (significant) number for this country\n\t\t\t\t//\n\t\t\t\t// If the original number (before stripping national prefix) was viable,\n\t\t\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t\t\t// like `8` is the national prefix for Russia and both\n\t\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\t\t\tif (matchesEntirely(this.national_number, this.metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, this.metadata.nationalNumberPattern())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.national_prefix = this.national_number.slice(0, this.national_number.length - potential_national_number.length);\n\t\t\tthis.national_number = potential_national_number;\n\n\t\t\treturn this.national_prefix;\n\t\t}\n\t}, {\n\t\tkey: 'is_possible_number',\n\t\tvalue: function is_possible_number(number) {\n\t\t\tvar validation_result = check_number_length_for_type(number, undefined, this.metadata);\n\t\t\tswitch (validation_result) {\n\t\t\t\tcase 'IS_POSSIBLE':\n\t\t\t\t\treturn true;\n\t\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\t\t// \treturn !this.is_international()\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'choose_another_format',\n\t\tvalue: function choose_another_format() {\n\t\t\t// When there are multiple available formats, the formatter uses the first\n\t\t\t// format where a formatting template could be created.\n\t\t\tfor (var _iterator2 = this.matching_formats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n\t\t\t\tvar _ref2;\n\n\t\t\t\tif (_isArray2) {\n\t\t\t\t\tif (_i2 >= _iterator2.length) break;\n\t\t\t\t\t_ref2 = _iterator2[_i2++];\n\t\t\t\t} else {\n\t\t\t\t\t_i2 = _iterator2.next();\n\t\t\t\t\tif (_i2.done) break;\n\t\t\t\t\t_ref2 = _i2.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref2;\n\n\t\t\t\t// If this format is currently being used\n\t\t\t\t// and is still possible, then stick to it.\n\t\t\t\tif (this.chosen_format === format) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If this `format` is suitable for \"as you type\",\n\t\t\t\t// then extract the template from this format\n\t\t\t\t// and use it to format the phone number being input.\n\n\t\t\t\tif (!this.is_format_applicable(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!this.create_formatting_template(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis.chosen_format = format;\n\n\t\t\t\t// With a new formatting template, the matched position\n\t\t\t\t// using the old template needs to be reset.\n\t\t\t\tthis.last_match_position = -1;\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// No format matches the phone number,\n\t\t\t// therefore set `country` to `undefined`\n\t\t\t// (or to the default country).\n\t\t\tthis.reset_country();\n\n\t\t\t// No format matches the national phone number entered\n\t\t\tthis.reset_format();\n\t\t}\n\t}, {\n\t\tkey: 'is_format_applicable',\n\t\tvalue: function is_format_applicable(format) {\n\t\t\t// If national prefix is mandatory for this phone number format\n\t\t\t// and the user didn't input the national prefix\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (!this.is_international() && !this.national_prefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// If this format doesn't use national prefix\n\t\t\t// but the user did input national prefix\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (this.national_prefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}, {\n\t\tkey: 'create_formatting_template',\n\t\tvalue: function create_formatting_template(format) {\n\t\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t\t// (Though there's no such format in current metadata)\n\t\t\t/* istanbul ignore if */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get formatting template for this phone number format\n\t\t\tvar template = this.get_template_for_phone_number_format_pattern(format);\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (!template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// This one is for national number only\n\t\t\tthis.partially_populated_template = template;\n\n\t\t\t// For convenience, the public `.template` property\n\t\t\t// contains the whole international number\n\t\t\t// if the phone number being input is international:\n\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t// a spacebar and then the template for the formatted national number.\n\t\t\tif (this.is_international()) {\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n\t\t\t}\n\t\t\t// For local numbers, replace national prefix\n\t\t\t// with a digit placeholder.\n\t\t\telse {\n\t\t\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER);\n\t\t\t\t}\n\n\t\t\t// This one is for the full phone number\n\t\t\treturn this.template;\n\t\t}\n\n\t\t// Generates formatting template for a phone number format\n\n\t}, {\n\t\tkey: 'get_template_for_phone_number_format_pattern',\n\t\tvalue: function get_template_for_phone_number_format_pattern(format) {\n\t\t\t// A very smart trick by the guys at Google\n\t\t\tvar number_pattern = format.pattern();\n\n\t\t\t/* istanbul ignore else */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n\t\t\t\tnumber_pattern = number_pattern\n\t\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n\t\t\t}\n\n\t\t\t// This match will always succeed,\n\t\t\t// because the \"longest dummy phone number\"\n\t\t\t// has enough length to accomodate any possible\n\t\t\t// national phone number format pattern.\n\t\t\tvar dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0];\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (this.national_number.length > dummy_phone_number_matching_format_pattern.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare the phone number format\n\t\t\tvar number_format = this.get_format_format(format);\n\n\t\t\t// Get a formatting template which can be used to efficiently format\n\t\t\t// a partial number where digits are added one by one.\n\n\t\t\t// Below `strict_pattern` is used for the\n\t\t\t// regular expression (with `^` and `$`).\n\t\t\t// This wasn't originally in Google's `libphonenumber`\n\t\t\t// and I guess they don't really need it\n\t\t\t// because they're not using \"templates\" to format phone numbers\n\t\t\t// but I added `strict_pattern` after encountering\n\t\t\t// South Korean phone number formatting bug.\n\t\t\t//\n\t\t\t// Non-strict regular expression bug demonstration:\n\t\t\t//\n\t\t\t// this.national_number : `111111111` (9 digits)\n\t\t\t//\n\t\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\n\t\t\t// number_format : `$1 $2 $3`\n\t\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\n\t\t\t//\n\t\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n\t\t\t//\n\t\t\t// template : xx xxxx xxxx\n\t\t\t//\n\t\t\t// But the correct template in this case is `xx xxx xxxx`.\n\t\t\t// The template was generated incorrectly because of the\n\t\t\t// `{3,4}` variability in the `number_pattern`.\n\t\t\t//\n\t\t\t// The fix is, if `this.national_number` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then `this.national_number` is used\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\n\t\t\tvar strict_pattern = new RegExp('^' + number_pattern + '$');\n\t\t\tvar national_number_dummy_digits = this.national_number.replace(/\\d/g, DUMMY_DIGIT);\n\n\t\t\t// If `this.national_number` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then use it\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\t\t\tif (strict_pattern.test(national_number_dummy_digits)) {\n\t\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits;\n\t\t\t}\n\n\t\t\t// Generate formatting template for this phone number format\n\t\t\treturn dummy_phone_number_matching_format_pattern\n\t\t\t// Format the dummy phone number according to the format\n\t\t\t.replace(new RegExp(number_pattern), number_format)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n\t\t}\n\t}, {\n\t\tkey: 'format_next_national_number_digits',\n\t\tvalue: function format_next_national_number_digits(digits) {\n\t\t\t// Using `.split('')` to iterate through a string here\n\t\t\t// to avoid requiring `Symbol.iterator` polyfill.\n\t\t\t// `.split('')` is generally not safe for Unicode,\n\t\t\t// but in this particular case for `digits` it is safe.\n\t\t\t// for (const digit of digits)\n\t\t\tfor (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n\t\t\t\tvar _ref3;\n\n\t\t\t\tif (_isArray3) {\n\t\t\t\t\tif (_i3 >= _iterator3.length) break;\n\t\t\t\t\t_ref3 = _iterator3[_i3++];\n\t\t\t\t} else {\n\t\t\t\t\t_i3 = _iterator3.next();\n\t\t\t\t\tif (_i3.done) break;\n\t\t\t\t\t_ref3 = _i3.value;\n\t\t\t\t}\n\n\t\t\t\tvar digit = _ref3;\n\n\t\t\t\t// If there is room for more digits in current `template`,\n\t\t\t\t// then set the next digit in the `template`,\n\t\t\t\t// and return the formatted digits so far.\n\n\t\t\t\t// If more digits are entered than the current format could handle\n\t\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1) {\n\t\t\t\t\t// Reset the current format,\n\t\t\t\t\t// so that the new format will be chosen\n\t\t\t\t\t// in a subsequent `this.choose_another_format()` call\n\t\t\t\t\t// later in code.\n\t\t\t\t\tthis.chosen_format = undefined;\n\t\t\t\t\tthis.template = undefined;\n\t\t\t\t\tthis.partially_populated_template = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER);\n\t\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n\t\t\t}\n\n\t\t\t// Return the formatted phone number so far.\n\t\t\treturn cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1);\n\n\t\t\t// The old way which was good for `input-format` but is not so good\n\t\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\n\t\t\t// return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\n\t\t\t// \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\n\t\t}\n\t}, {\n\t\tkey: 'is_international',\n\t\tvalue: function is_international() {\n\t\t\treturn this.parsed_input && this.parsed_input[0] === '+';\n\t\t}\n\t}, {\n\t\tkey: 'get_format_format',\n\t\tvalue: function get_format_format(format) {\n\t\t\tif (this.is_international()) {\n\t\t\t\treturn changeInternationalFormatStyle(format.internationalFormat());\n\t\t\t}\n\n\t\t\t// If national prefix formatting rule is set\n\t\t\t// for this phone number format\n\t\t\tif (format.nationalPrefixFormattingRule()) {\n\t\t\t\t// If the user did input the national prefix\n\t\t\t\t// (or if the national prefix formatting rule does not require national prefix)\n\t\t\t\t// then maybe make it part of the phone number template\n\t\t\t\tif (this.national_prefix || !format.usesNationalPrefix()) {\n\t\t\t\t\t// Make the national prefix part of the phone number template\n\t\t\t\t\treturn format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Special handling for NANPA countries for AsYouType formatter.\n\t\t\t// Copied from Google's `libphonenumber`:\n\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\t\t\telse if (this.countryCallingCode === '1' && this.national_prefix === '1') {\n\t\t\t\t\treturn '1 ' + format.format();\n\t\t\t\t}\n\n\t\t\treturn format.format();\n\t\t}\n\n\t\t// Determines the country of the phone number\n\t\t// entered so far based on the country phone code\n\t\t// and the national phone number.\n\n\t}, {\n\t\tkey: 'determine_the_country',\n\t\tvalue: function determine_the_country() {\n\t\t\tthis.country = find_country_code(this.countryCallingCode, this.national_number, this.metadata);\n\t\t}\n\n\t\t/**\r\n   * Returns an instance of `PhoneNumber` class.\r\n   * Will return `undefined` if no national (significant) number\r\n   * digits have been entered so far, or if no `defaultCountry` has been\r\n   * set and the user enters a phone number not in international format.\r\n   */\n\n\t}, {\n\t\tkey: 'getNumber',\n\t\tvalue: function getNumber() {\n\t\t\tif (!this.countryCallingCode || !this.national_number) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tvar phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.national_number, this.metadata.metadata);\n\t\t\tif (this.carrierCode) {\n\t\t\t\tphoneNumber.carrierCode = this.carrierCode;\n\t\t\t}\n\t\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\n\t\t\treturn phoneNumber;\n\t\t}\n\t}, {\n\t\tkey: 'getNationalNumber',\n\t\tvalue: function getNationalNumber() {\n\t\t\treturn this.national_number;\n\t\t}\n\t}, {\n\t\tkey: 'getTemplate',\n\t\tvalue: function getTemplate() {\n\t\t\tif (!this.template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar index = -1;\n\n\t\t\tvar i = 0;\n\t\t\twhile (i < this.parsed_input.length) {\n\t\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn cut_stripping_dangling_braces(this.template, index + 1);\n\t\t}\n\t}]);\n\n\treturn AsYouType;\n}();\n\nexport default AsYouType;\n\n\nexport function strip_dangling_braces(string) {\n\tvar dangling_braces = [];\n\tvar i = 0;\n\twhile (i < string.length) {\n\t\tif (string[i] === '(') {\n\t\t\tdangling_braces.push(i);\n\t\t} else if (string[i] === ')') {\n\t\t\tdangling_braces.pop();\n\t\t}\n\t\ti++;\n\t}\n\n\tvar start = 0;\n\tvar cleared_string = '';\n\tdangling_braces.push(string.length);\n\tfor (var _iterator4 = dangling_braces, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n\t\tvar _ref4;\n\n\t\tif (_isArray4) {\n\t\t\tif (_i4 >= _iterator4.length) break;\n\t\t\t_ref4 = _iterator4[_i4++];\n\t\t} else {\n\t\t\t_i4 = _iterator4.next();\n\t\t\tif (_i4.done) break;\n\t\t\t_ref4 = _i4.value;\n\t\t}\n\n\t\tvar index = _ref4;\n\n\t\tcleared_string += string.slice(start, index);\n\t\tstart = index + 1;\n\t}\n\n\treturn cleared_string;\n}\n\nexport function cut_stripping_dangling_braces(string, cut_before_index) {\n\tif (string[cut_before_index] === ')') {\n\t\tcut_before_index++;\n\t}\n\treturn strip_dangling_braces(string.slice(0, cut_before_index));\n}\n\nexport function close_dangling_braces(template, cut_before) {\n\tvar retained_template = template.slice(0, cut_before);\n\n\tvar opening_braces = count_occurences('(', retained_template);\n\tvar closing_braces = count_occurences(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\t\tcut_before++;\n\t}\n\n\treturn template.slice(0, cut_before);\n}\n\n// Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\nexport function count_occurences(symbol, string) {\n\tvar count = 0;\n\n\t// Using `.split('')` to iterate through a string here\n\t// to avoid requiring `Symbol.iterator` polyfill.\n\t// `.split('')` is generally not safe for Unicode,\n\t// but in this particular case for counting brackets it is safe.\n\t// for (const character of string)\n\tfor (var _iterator5 = string.split(''), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n\t\tvar _ref5;\n\n\t\tif (_isArray5) {\n\t\t\tif (_i5 >= _iterator5.length) break;\n\t\t\t_ref5 = _iterator5[_i5++];\n\t\t} else {\n\t\t\t_i5 = _iterator5.next();\n\t\t\tif (_i5.done) break;\n\t\t\t_ref5 = _i5.value;\n\t\t}\n\n\t\tvar character = _ref5;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nexport function repeat(string, times) {\n\tif (times < 1) {\n\t\treturn '';\n\t}\n\n\tvar result = '';\n\n\twhile (times > 1) {\n\t\tif (times & 1) {\n\t\t\tresult += string;\n\t\t}\n\n\t\ttimes >>= 1;\n\t\tstring += string;\n\t}\n\n\treturn result + string;\n}\n//# sourceMappingURL=AsYouType.js.map","import PhoneNumber from './PhoneNumber';\n\nexport default function getExampleNumber(country, examples, metadata) {\n\treturn new PhoneNumber(country, examples[country], metadata);\n}\n//# sourceMappingURL=getExampleNumber.js.map","import AsYouType from './AsYouType';\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n  return new AsYouType(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _class2, _temp, _initialiseProps;\n\n// import InputSmart from './InputSmart'\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _core = require('libphonenumber-js/core');\n\nvar _InputBasic = require('./InputBasic');\n\nvar _InputBasic2 = _interopRequireDefault(_InputBasic);\n\nvar _Flag = require('./Flag');\n\nvar _Flag2 = _interopRequireDefault(_Flag);\n\nvar _PropTypes = require('./PropTypes');\n\nvar _inputControl = require('./input-control');\n\nvar _countries = require('./countries');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// `PureComponent` is only available in React >= 15.3.0.\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nvar PhoneNumberInput = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp = _class2 = function (_PureComponent) {\n\t_inherits(PhoneNumberInput, _PureComponent);\n\n\tfunction PhoneNumberInput(props) {\n\t\t_classCallCheck(this, PhoneNumberInput);\n\n\t\tvar _this = _possibleConstructorReturn(this, (PhoneNumberInput.__proto__ || Object.getPrototypeOf(PhoneNumberInput)).call(this, props));\n\n\t\t_initialiseProps.call(_this);\n\n\t\tvar _this$props = _this.props,\n\t\t    value = _this$props.value,\n\t\t    country = _this$props.country,\n\t\t    countries = _this$props.countries,\n\t\t    countryOptions = _this$props.countryOptions,\n\t\t    labels = _this$props.labels,\n\t\t    international = _this$props.international,\n\t\t    metadata = _this$props.metadata;\n\n\n\t\tif (country) {\n\t\t\tvalidateCountry(country, metadata);\n\t\t}\n\t\tif (countries) {\n\t\t\tvalidateCountries(countries, metadata);\n\t\t}\n\t\tif (countryOptions) {\n\t\t\tvalidateCountryOptions(countryOptions, metadata);\n\t\t}\n\n\t\tvar phoneNumber = (0, _inputControl.parsePhoneNumber)(value, metadata);\n\n\t\tvar pre_selected_country = (0, _inputControl.getPreSelectedCountry)(phoneNumber, country, countries || (0, _countries.getCountryCodes)(labels), international, metadata);\n\n\t\t_this.state = {\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\n\t\t\tprops: _this.props,\n\n\t\t\t// The country selected.\n\t\t\tcountry: pre_selected_country,\n\n\t\t\t// Generate country `<select/>` options.\n\t\t\tcountry_select_options: generate_country_select_options(_this.props),\n\n\t\t\t// `parsed_input` state property holds non-formatted user's input.\n\t\t\t// The reason is that there's no way of finding out\n\t\t\t// in which form should `value` be displayed: international or national.\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\n\t\t\t// then value is `+78005553535` and `parsed_input` is `88005553535`\n\t\t\t// and if a user entered `+7 800 555 35 35`\n\t\t\t// then value is `+78005553535` and `parsed_input` is `+78005553535`.\n\t\t\tparsed_input: generateParsedInput(value, phoneNumber, _this.props),\n\n\t\t\t// `value` property is duplicated in state.\n\t\t\t// The reason is that `getDerivedStateFromProps()`\n\t\t\t// needs this `value` to compare to the new `value` property\n\t\t\t// to find out if `parsed_input` needs updating:\n\t\t\t// If the `value` property was changed externally\n\t\t\t// then it won't be equal to `state.value`\n\t\t\t// in which case `parsed_input` and `country` should be updated.\n\t\t\tvalue: value\n\t\t};\n\t\treturn _this;\n\t}\n\n\t_createClass(PhoneNumberInput, [{\n\t\tkey: 'componentDidMount',\n\t\tvalue: function componentDidMount() {\n\t\t\tvar _props = this.props,\n\t\t\t    country = _props.country,\n\t\t\t    onCountryChange = _props.onCountryChange;\n\t\t\tvar selectedCountry = this.state.country;\n\n\n\t\t\tif (onCountryChange && selectedCountry !== country) {\n\t\t\t\tonCountryChange(selectedCountry);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentDidUpdate',\n\t\tvalue: function componentDidUpdate(prevProps, prevState) {\n\t\t\tvar _props2 = this.props,\n\t\t\t    country = _props2.country,\n\t\t\t    countries = _props2.countries,\n\t\t\t    countryOptions = _props2.countryOptions,\n\t\t\t    onCountryChange = _props2.onCountryChange,\n\t\t\t    metadata = _props2.metadata;\n\n\n\t\t\tif (country && country !== prevProps.country) {\n\t\t\t\tvalidateCountry(country, metadata);\n\t\t\t}\n\t\t\tif (countries && countries !== prevProps.countries) {\n\t\t\t\tvalidateCountries(countries, metadata);\n\t\t\t}\n\t\t\tif (countryOptions && countryOptions !== prevProps.countryOptions) {\n\t\t\t\tvalidateCountryOptions(countryOptions, metadata);\n\t\t\t}\n\n\t\t\tif (onCountryChange && this.state.country !== prevState.country) {\n\t\t\t\tonCountryChange(this.state.country);\n\t\t\t}\n\t\t}\n\n\t\t// Country `<select/>` `onChange` handler.\n\n\n\t\t// Phone number `<input/>` `onKeyDown` handler.\n\n\n\t\t/**\r\n   * `<input/>` `onChange()` handler.\r\n   * Updates `value` property accordingly (so that they are kept in sync).\r\n   * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n   */\n\n\n\t\t// Toggles the `--focus` CSS class.\n\n\n\t\t// Toggles the `--focus` CSS class.\n\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`\n\t\t// so that it gets the up-to-date `value` in its `onBlur` handler.\n\t\t// Without this fix it just gets the actual (raw) input field textual value.\n\t\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\n\t\t//\n\t\t// A developer is not supposed to pass this `onBlur` property manually.\n\t\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t\t// and this component patches that `onBlur` handler (a hacky way but works).\n\t\t//\n\n\n\t\t// When country `<select/>` is toggled.\n\n\n\t\t// Can be called externally.\n\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props3 = this.props,\n\t\t\t    name = _props3.name,\n\t\t\t    disabled = _props3.disabled,\n\t\t\t    disablePhoneInput = _props3.disablePhoneInput,\n\t\t\t    autoComplete = _props3.autoComplete,\n\t\t\t    countrySelectTabIndex = _props3.countrySelectTabIndex,\n\t\t\t    showCountrySelect = _props3.showCountrySelect,\n\t\t\t    style = _props3.style,\n\t\t\t    className = _props3.className,\n\t\t\t    inputClassName = _props3.inputClassName,\n\t\t\t    getInputClassName = _props3.getInputClassName,\n\t\t\t    countrySelectProperties = _props3.countrySelectProperties,\n\t\t\t    error = _props3.error,\n\t\t\t    indicateInvalid = _props3.indicateInvalid,\n\t\t\t    CountrySelectComponent = _props3.countrySelectComponent,\n\t\t\t    InputComponent = _props3.inputComponent,\n\t\t\t    ext = _props3.ext,\n\t\t\t    countries = _props3.countries,\n\t\t\t    countryOptions = _props3.countryOptions,\n\t\t\t    labels = _props3.labels,\n\t\t\t    _ = _props3.country,\n\t\t\t    flags = _props3.flags,\n\t\t\t    flagComponent = _props3.flagComponent,\n\t\t\t    flagsPath = _props3.flagsPath,\n\t\t\t    international = _props3.international,\n\t\t\t    internationalIcon = _props3.internationalIcon,\n\t\t\t    displayInitialValueAsLocalNumber = _props3.displayInitialValueAsLocalNumber,\n\t\t\t    onCountryChange = _props3.onCountryChange,\n\t\t\t    limitMaxLength = _props3.limitMaxLength,\n\t\t\t    metadata = _props3.metadata,\n\t\t\t    phoneNumberInputProps = _objectWithoutProperties(_props3, ['name', 'disabled', 'disablePhoneInput', 'autoComplete', 'countrySelectTabIndex', 'showCountrySelect', 'style', 'className', 'inputClassName', 'getInputClassName', 'countrySelectProperties', 'error', 'indicateInvalid', 'countrySelectComponent', 'inputComponent', 'ext', 'countries', 'countryOptions', 'labels', 'country', 'flags', 'flagComponent', 'flagsPath', 'international', 'internationalIcon', 'displayInitialValueAsLocalNumber', 'onCountryChange', 'limitMaxLength', 'metadata']);\n\n\t\t\tvar _state = this.state,\n\t\t\t    country = _state.country,\n\t\t\t    hidePhoneInputField = _state.hidePhoneInputField,\n\t\t\t    country_select_options = _state.country_select_options,\n\t\t\t    parsed_input = _state.parsed_input,\n\t\t\t    isFocused = _state.isFocused;\n\n\t\t\t// const InputComponent = inputComponent || (smartCaret ? InputSmart : InputBasic)\n\n\t\t\t// Extract `countrySelectProperties` from `this.props`\n\t\t\t// also removing them from `phoneNumberInputProps`.\n\n\t\t\tvar _countrySelectProps = {};\n\t\t\tif (countrySelectProperties) {\n\t\t\t\tfor (var key in countrySelectProperties) {\n\t\t\t\t\tif (this.props.hasOwnProperty(key)) {\n\t\t\t\t\t\t_countrySelectProps[countrySelectProperties[key]] = this.props[key];\n\t\t\t\t\t\tdelete phoneNumberInputProps[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _react2.default.createElement(\n\t\t\t\t'div',\n\t\t\t\t{\n\t\t\t\t\tstyle: style,\n\t\t\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input', {\n\t\t\t\t\t\t'react-phone-number-input--focus': isFocused,\n\t\t\t\t\t\t'react-phone-number-input--invalid': error && indicateInvalid\n\t\t\t\t\t}, className) },\n\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'react-phone-number-input__row' },\n\t\t\t\t\tshowCountrySelect && _react2.default.createElement(CountrySelectComponent, _extends({}, _countrySelectProps, {\n\t\t\t\t\t\tref: this.storeCountrySelectInstance,\n\t\t\t\t\t\tname: name ? name + '__country' : undefined,\n\t\t\t\t\t\tvalue: country,\n\t\t\t\t\t\toptions: country_select_options,\n\t\t\t\t\t\tonChange: this.onCountryChange,\n\t\t\t\t\t\tonFocus: this._onFocus,\n\t\t\t\t\t\tonBlur: this._onBlur,\n\t\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\t\ttabIndex: countrySelectTabIndex,\n\t\t\t\t\t\thidePhoneInputField: this.hidePhoneInputField,\n\t\t\t\t\t\tfocusPhoneInputField: this.focus,\n\t\t\t\t\t\t'aria-label': labels.country,\n\t\t\t\t\t\tclassName: 'react-phone-number-input__country' })),\n\t\t\t\t\t!hidePhoneInputField && _react2.default.createElement(InputComponent, _extends({\n\t\t\t\t\t\ttype: 'tel',\n\t\t\t\t\t\tname: name\n\t\t\t\t\t}, phoneNumberInputProps, {\n\t\t\t\t\t\tref: this.storePhoneNumberInputInstance,\n\t\t\t\t\t\tmetadata: metadata,\n\t\t\t\t\t\tcountry: country,\n\t\t\t\t\t\tvalue: parsed_input || '',\n\t\t\t\t\t\tonChange: this.onChange,\n\t\t\t\t\t\tonFocus: this.onFocus,\n\t\t\t\t\t\tonBlur: this.onBlur,\n\t\t\t\t\t\tonKeyDown: this.onPhoneNumberKeyDown,\n\t\t\t\t\t\tdisabled: disabled || disablePhoneInput,\n\t\t\t\t\t\tautoComplete: autoComplete,\n\t\t\t\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input__input', 'react-phone-number-input__phone', {\n\t\t\t\t\t\t\t'react-phone-number-input__input--disabled': disabled || disablePhoneInput,\n\t\t\t\t\t\t\t'react-phone-number-input__input--invalid': error && indicateInvalid\n\t\t\t\t\t\t}, inputClassName, getInputClassName && getInputClassName({\n\t\t\t\t\t\t\tdisabled: disabled || disablePhoneInput,\n\t\t\t\t\t\t\tinvalid: error && indicateInvalid\n\t\t\t\t\t\t})) })),\n\t\t\t\t\text && !hidePhoneInputField && _react2.default.createElement(\n\t\t\t\t\t\t'label',\n\t\t\t\t\t\t{ className: 'react-phone-number-input__ext' },\n\t\t\t\t\t\tlabels.ext,\n\t\t\t\t\t\t_react2.default.cloneElement(ext, {\n\t\t\t\t\t\t\tonChange: ext.props.onChange ? function (event) {\n\t\t\t\t\t\t\t\treturn ext.props.onChange(parseExtDigits(event));\n\t\t\t\t\t\t\t} : undefined,\n\t\t\t\t\t\t\tonFocus: this._onFocus,\n\t\t\t\t\t\t\tonBlur: this._onBlur,\n\t\t\t\t\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input__input', 'react-phone-number-input__ext-input', {\n\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled': disabled || disablePhoneInput\n\t\t\t\t\t\t\t}, inputClassName, getInputClassName && getInputClassName({\n\t\t\t\t\t\t\t\tdisabled: disabled || disablePhoneInput\n\t\t\t\t\t\t\t}), ext.props.className)\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\terror && indicateInvalid && _react2.default.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'react-phone-number-input__error' },\n\t\t\t\t\terror\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}], [{\n\t\tkey: 'getDerivedStateFromProps',\n\n\n\t\t// `state` holds previous props as `props`, and also:\n\t\t// * `country` — The currently selected country, e.g. `\"RU\"`.\n\t\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n\t\t// * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\n\t\t// (and a couple of other less significant properties)\n\t\tvalue: function getDerivedStateFromProps(props, state) {\n\t\t\tvar country = state.country,\n\t\t\t    hasUserSelectedACountry = state.hasUserSelectedACountry,\n\t\t\t    value = state.value,\n\t\t\t    _state$props = state.props,\n\t\t\t    old_default_country = _state$props.country,\n\t\t\t    old_value = _state$props.value;\n\t\t\tvar metadata = props.metadata,\n\t\t\t    countries = props.countries,\n\t\t\t    new_default_country = props.country,\n\t\t\t    new_value = props.value;\n\n\n\t\t\tvar new_state = {\n\t\t\t\t// Emulate `prevProps` via `state.props`.\n\t\t\t\tprops: props,\n\t\t\t\t// If the user has already manually selected a country\n\t\t\t\t// then don't override that already selected country\n\t\t\t\t// if the default `country` property changes.\n\t\t\t\t// That's what `hasUserSelectedACountry` flag is for.\n\t\t\t\thasUserSelectedACountry: hasUserSelectedACountry\n\n\t\t\t\t// If `countries` or `labels` or `international` changed\n\t\t\t\t// then re-generate country `<select/>` options.\n\t\t\t};if (props.countries !== state.props.countries || props.labels !== state.props.labels || props.international !== state.props.international) {\n\t\t\t\tnew_state.country_select_options = generate_country_select_options(props);\n\t\t\t}\n\n\t\t\t// If the default country changed.\n\t\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\n\t\t\t// then select it but only if the user hasn't already manually\n\t\t\t// selected a country and no phone number has been entered so far.\n\t\t\t// Because if the user has already started inputting a phone number\n\t\t\t// then he's okay with no country being selected at all (\"International\")\n\t\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\t\t\tif (new_default_country !== old_default_country && !hasUserSelectedACountry && !value && !new_value) {\n\t\t\t\treturn _extends({}, new_state, {\n\t\t\t\t\tcountry: new_default_country\n\t\t\t\t\t// `value` is `undefined`.\n\t\t\t\t\t// `parsed_input` is `undefined` because `value` is `undefined`.\n\t\t\t\t});\n\t\t\t}\n\t\t\t// If a new `value` is set externally.\n\t\t\t// (e.g. as a result of an ajax API request\n\t\t\t//  to get user's phone after page loaded)\n\t\t\t// The first part — `new_value !== old_value` —\n\t\t\t// is basically `props.value !== prevProps.value`\n\t\t\t// so it means \"if value property was changed externally\".\n\t\t\t// The second part — `new_value !== value` —\n\t\t\t// is for ignoring the `getDerivedStateFromProps()` call\n\t\t\t// which happens in `this.onChange()` right after `this.setState()`.\n\t\t\t// If this `getDerivedStateFromProps()` call isn't ignored\n\t\t\t// then the country flag would reset on each input.\n\t\t\telse if (new_value !== old_value && new_value !== value) {\n\t\t\t\t\tvar phoneNumber = (0, _inputControl.parsePhoneNumber)(new_value, metadata);\n\n\t\t\t\t\treturn _extends({}, new_state, {\n\t\t\t\t\t\tparsed_input: generateParsedInput(new_value, phoneNumber, props),\n\t\t\t\t\t\tvalue: new_value,\n\t\t\t\t\t\tcountry: new_value ? phoneNumber && (!countries || countries.indexOf(phoneNumber.country) >= 0) ? phoneNumber.country : undefined : country\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t// `country` didn't change.\n\t\t\t// `value` didn't change.\n\t\t\t// `parsed_input` didn't change, because `value` didn't change.\n\t\t\t//\n\t\t\t// Maybe `new_state.country_select_options` changed.\n\t\t\t// In any case, update `prevProps`.\n\t\t\treturn new_state;\n\t\t}\n\t}]);\n\n\treturn PhoneNumberInput;\n}(PureComponent), _class2.propTypes = {\n\t/**\r\n  * Phone number in `E.164` format.\r\n  *\r\n  * Example:\r\n  *\r\n  * `\"+12223333333\"`\r\n  */\n\tvalue: _propTypes2.default.string,\n\n\t/**\r\n  * Updates the `value` as the user inputs the phone number.\r\n  */\n\tonChange: _propTypes2.default.func.isRequired,\n\n\t/**\r\n  * Toggles the `--focus` CSS class.\r\n  * @ignore\r\n  */\n\tonFocus: _propTypes2.default.func,\n\n\t/**\r\n  * `onBlur` is usually passed by `redux-form`.\r\n  * @ignore\r\n  */\n\tonBlur: _propTypes2.default.func,\n\n\t/**\r\n  * `onKeyDown` handler (e.g. to handle Enter key press).\r\n  * @ignore\r\n  */\n\tonKeyDown: _propTypes2.default.func,\n\n\t/**\r\n  * Disables both the phone number `<input/>`\r\n  * and the country `<select/>`.\r\n  */\n\t// (is `false` by default)\n\tdisabled: _propTypes2.default.bool.isRequired,\n\n\t/**\r\n  * Sets `autoComplete` property for phone number `<input/>`.\r\n  *\r\n  * Web browser's \"autocomplete\" feature\r\n  * remembers the phone number being input\r\n  * and can also autofill the `<input/>`\r\n  * with previously remembered phone numbers.\r\n  *\r\n  * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\r\n  *\r\n  * For example, can be used to turn it off:\r\n  *\r\n  * \"So when should you use `autocomplete=\"off\"`?\r\n  *  One example is when you've implemented your own version\r\n  *  of autocomplete for search. Another example is any form field\r\n  *  where users will input and submit different kinds of information\r\n  *  where it would not be useful to have the browser remember\r\n  *  what was submitted previously\".\r\n  */\n\t// (is `\"tel\"` by default)\n\tautoComplete: _propTypes2.default.string.isRequired,\n\n\t/**\r\n  * Set to `true` to show the initial `value` in\r\n  * \"national\" format rather than \"international\".\r\n  *\r\n  * For example, if this flag is set to `true`\r\n  * and the initial `value=\"+12133734253\"` is passed\r\n  * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n  *\r\n  * By default, this flag is set to `false`,\r\n  * meaning that if the initial `value=\"+12133734253\"` is passed\r\n  * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n  *\r\n  * The reason for such default behaviour is that\r\n  * the newer generation grows up when there are no stationary phones\r\n  * and therefore everyone inputs phone numbers in international format\r\n  * in their smartphones so people gradually get more accustomed to\r\n  * writing phone numbers in international format rather than in local format.\r\n  * Future people won't be using \"national\" format, only \"international\".\r\n  */\n\t// (is `false` by default)\n\tdisplayInitialValueAsLocalNumber: _propTypes2.default.bool.isRequired,\n\n\t/**\r\n  * The country to be selected by default.\r\n  * For example, can be set after a GeoIP lookup.\r\n  *\r\n  * Example: `\"US\"`.\r\n  */\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\n\tcountry: _propTypes2.default.string,\n\n\t/**\r\n  * If specified, only these countries will be available for selection.\r\n  *\r\n  * Example:\r\n  *\r\n  * `[\"RU\", \"UA\", \"KZ\"]`\r\n  */\n\tcountries: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n\t/**\r\n  * Custom country `<select/>` option names.\r\n  * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n  *\r\n  * Example:\r\n  *\r\n  * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n  *\r\n  * See the `locales` directory for examples.\r\n  */\n\tlabels: _PropTypes.labels.isRequired,\n\n\t/**\r\n  * The base URL path for country flag icons.\r\n  * By default it loads country flag icons from\r\n  * `flag-icon-css` repo github pages website.\r\n  * I imagine someone might want to download\r\n  * those country flag icons and host them\r\n  * on their own servers instead.\r\n  */\n\tflagsPath: _propTypes2.default.string.isRequired,\n\n\t/**\r\n  * Custom country flag icon components.\r\n  * These flags replace the default ones.\r\n  *\r\n  * The shape is an object where keys are country codes\r\n  * and values are flag icon components.\r\n  * Flag icon components receive the same properties\r\n  * as `flagComponent` (see below).\r\n  *\r\n  * Example:\r\n  *\r\n  * `{ \"RU\": () => <img src=\"...\"/> }`\r\n  *\r\n  * Can be used to replace the default flags\r\n  * with custom ones for certain (or all) countries.\r\n  *\r\n  * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\r\n  *\r\n  * By default flag icons are inserted as `<img/>`s\r\n  * with their `src` pointed to `flag-icon-css` repo github pages website.\r\n  *\r\n  * There might be some cases\r\n  * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\r\n  * when including the full set of `<svg/>` country flags (3 megabytes)\r\n  * is more appropriate than downloading them individually at runtime only if needed.\r\n  *\r\n  * Example:\r\n  *\r\n  * `// Uses <svg/> flags (3 megabytes):`\r\n  *\r\n  * `import flags from 'react-phone-number-input/flags'`\r\n  *\r\n  * `import PhoneInput from 'react-phone-number-input'`\r\n  *\r\n  * `<PhoneInput flags={flags} .../>`\r\n  */\n\tflags: _propTypes2.default.objectOf(_propTypes2.default.func),\n\n\t/**\r\n  * Country flag icon component.\r\n  *\r\n  * Takes properties:\r\n  *\r\n  * * country : string — The country code.\r\n  * * flagsPath : string — The `flagsPath` property (see above).\r\n  * * flags : object — The `flags` property (see above).\r\n  */\n\tflagComponent: _propTypes2.default.func.isRequired,\n\n\t/**\r\n  * Set to `false` to drop the \"International\" option from country `<select/>`.\r\n  */\n\tinternational: _propTypes2.default.bool.isRequired,\n\n\t/**\r\n  * Custom \"International\" country `<select/>` option icon.\r\n  */\n\tinternationalIcon: _propTypes2.default.func.isRequired,\n\n\t/**\r\n  * Set to `false` to hide country `<select/>`.\r\n  */\n\t// (is `true` by default)\n\tshowCountrySelect: _propTypes2.default.bool.isRequired,\n\n\t/**\r\n  * HTML `tabindex` attribute for country `<select/>`.\r\n  */\n\tcountrySelectTabIndex: _propTypes2.default.number,\n\n\t/**\r\n  * Can be used to place some countries on top of the list of country `<select/>` options.\r\n  *\r\n  * * `\"|\"` — inserts a separator.\r\n  * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\r\n  *\r\n  * Example:\r\n  *\r\n  * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n  */\n\tcountryOptions: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n\t/**\r\n  * `<Phone/>` component CSS style object.\r\n  */\n\tstyle: _propTypes2.default.object,\n\n\t/**\r\n  * `<Phone/>` component CSS class.\r\n  */\n\tclassName: _propTypes2.default.string,\n\n\t/**\r\n  * Phone number `<input/>` CSS class.\r\n  */\n\tinputClassName: _propTypes2.default.string,\n\n\t/**\r\n  * Returns phone number `<input/>` CSS class string.\r\n  * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\r\n  * @ignore\r\n  */\n\tgetInputClassName: _propTypes2.default.func,\n\n\t/**\r\n  * Country `<select/>` component.\r\n  *\r\n  * Receives properties:\r\n  *\r\n  * * `name : string?` — HTML `name` attribute.\r\n  * * `value : string?` — The currently selected country code.\r\n  * * `onChange(value : string?)` — Updates the `value`.\r\n  * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n  * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n  * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\r\n  * * `disabled : boolean?` — HTML `disabled` attribute.\r\n  * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\r\n  * * `className : string` — CSS class name.\r\n  */\n\t//\n\t// (deprecated)\n\t// * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\n\t// * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\n\t//\n\tcountrySelectComponent: _propTypes2.default.func.isRequired,\n\n\t/**\r\n  * Phone number `<input/>` component.\r\n  *\r\n  * Receives properties:\r\n  *\r\n  * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n  * * `onChange(value? : string)` — Updates the `value`.\r\n  * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n  * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n  * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\r\n  * * `metadata : object` — `libphonenumber-js` metadata.\r\n  * * All other properties should be passed through to the underlying `<input/>`.\r\n  *\r\n  * Must also implement `.focus()` method.\r\n  */\n\tinputComponent: _propTypes2.default.func.isRequired,\n\n\t/**\r\n  * Set to `false` to use `inputComponent={InputBasic}`\r\n  * instead of `input-format`'s `<ReactInput/>`.\r\n  * Is `false` by default.\r\n  */\n\t// smartCaret : PropTypes.bool.isRequired,\n\n\t/**\r\n  * Phone number extension `<input/>` element.\r\n  *\r\n  * Example:\r\n  *\r\n  *\t`ext={<input value={...} onChange={...}/>}`\r\n  */\n\text: _propTypes2.default.node,\n\n\t/**\r\n  * If set to `true` the phone number input will get trimmed\r\n  * if it exceeds the maximum length for the country.\r\n  */\n\tlimitMaxLength: _propTypes2.default.bool.isRequired,\n\n\t/**\r\n  * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\r\n  */\n\terror: _propTypes2.default.string,\n\n\t/**\r\n  * The `error` is shown only when `indicateInvalid` is `true`.\r\n  * (which is the default).\r\n  * @deprecated\r\n  * @ignore\r\n  */\n\tindicateInvalid: _propTypes2.default.bool,\n\n\t/**\r\n  * `libphonenumber-js` metadata.\r\n  *\r\n  * Can be used to pass custom `libphonenumber-js` metadata\r\n  * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n  */\n\tmetadata: _PropTypes.metadata.isRequired,\n\n\t/**\r\n  * A long time ago a person requested an `onCountryChange(country)` event listener.\r\n  * No valid reason was given other than compliance with some legacy code\r\n  * which stored both phone number and country in a database.\r\n  * @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n  */\n\tonCountryChange: _propTypes2.default.func,\n\n\t/**\r\n  * Disables only the phone number `<input/>`.\r\n  *\r\n  * Some users choose to implement a digital keyboard component for phone number input.\r\n  * In such cases the phone number input field must be disabled in order for the default system keyboard to not show up on focus.\r\n  * At the same time, country select should not be disabled in order for the user to be able to choose their country.\r\n  */\n\t// (is `false` by default)\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/215\n\tdisablePhoneInput: _propTypes2.default.bool.isRequired\n}, _class2.defaultProps = {\n\t/**\r\n  * Not disabled.\r\n  */\n\tdisabled: false,\n\tdisablePhoneInput: false,\n\n\t/**\r\n  * Show `error` (if passed).\r\n  * @deprecated\r\n  */\n\tindicateInvalid: true,\n\n\t/**\r\n  * Remember (and autofill) the value as a phone number.\r\n  */\n\tautoComplete: 'tel',\n\n\t/**\r\n  * Flag icon component.\r\n  */\n\tflagComponent: _Flag2.default,\n\n\t/**\r\n  * By default use icons from `flag-icon-css` github repo.\r\n  */\n\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n\t/**\r\n  * Default \"International\" country `<select/>` option icon (globe).\r\n  */\n\t// internationalIcon: InternationalIcon,\n\n\t/**\r\n  * Phone number `<input/>` component.\r\n  */\n\tinputComponent: _InputBasic2.default,\n\n\t/**\r\n  * Show country `<select/>`.\r\n  */\n\tshowCountrySelect: true,\n\n\t/**\r\n  * Don't convert the initially passed phone number `value`\r\n  * to a national phone number for its country.\r\n  * The reason is that the newer generation grows up when\r\n  * there are no stationary phones and therefore everyone inputs\r\n  * phone numbers with a `+` in their smartphones\r\n  * so phone numbers written in international form\r\n  * are gradually being considered more natural than local ones.\r\n  */\n\tdisplayInitialValueAsLocalNumber: false,\n\n\t/**\r\n  * Set to `false` to use `inputComponent={InputBasic}`\r\n  * instead of `input-format`'s `<ReactInput/>`.\r\n  * Is `false` by default.\r\n  */\n\t// smartCaret : false,\n\n\t/**\r\n  * Whether to add the \"International\" option\r\n  * to the list of countries.\r\n  */\n\tinternational: true,\n\n\t/**\r\n  * If set to `true` the phone number input will get trimmed\r\n  * if it exceeds the maximum length for the country.\r\n  */\n\tlimitMaxLength: false\n}, _initialiseProps = function _initialiseProps() {\n\tvar _this2 = this;\n\n\tthis.onCountryChange = function (new_country) {\n\t\tvar _props4 = _this2.props,\n\t\t    metadata = _props4.metadata,\n\t\t    onChange = _props4.onChange,\n\t\t    displayInitialValueAsLocalNumber = _props4.displayInitialValueAsLocalNumber;\n\t\tvar _state2 = _this2.state,\n\t\t    old_parsed_input = _state2.parsed_input,\n\t\t    old_country = _state2.country;\n\n\t\t// After the new `country` has been selected,\n\t\t// if the phone number `<input/>` holds any digits\n\t\t// then migrate those digits for the new `country`.\n\n\t\tvar new_parsed_input = (0, _inputControl.migrateParsedInputForNewCountry)(old_parsed_input, old_country, new_country, metadata, displayInitialValueAsLocalNumber);\n\n\t\tvar new_value = (0, _inputControl.e164)(new_parsed_input, new_country, metadata);\n\n\t\t// Focus phone number `<input/>` upon country selection.\n\t\t_this2.focus();\n\n\t\t// If the user has already manually selected a country\n\t\t// then don't override that already selected country\n\t\t// if the default `country` property changes.\n\t\t// That's what `hasUserSelectedACountry` flag is for.\n\n\t\t_this2.setState({\n\t\t\tcountry: new_country,\n\t\t\thasUserSelectedACountry: true,\n\t\t\tparsed_input: new_parsed_input,\n\t\t\tvalue: new_value\n\t\t}, function () {\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\tonChange(new_value);\n\t\t});\n\t};\n\n\tthis.onPhoneNumberKeyDown = function (event) {\n\t\tvar onKeyDown = _this2.props.onKeyDown;\n\n\t\t// Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\n\t\t// (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\n\t\t// so can't hijack \"Down arrow\" keypress here.\n\t\t// // Expand country `<select/>`` on \"Down arrow\" key press.\n\t\t// if (event.keyCode === 40) {\n\t\t// \tthis.country_select.toggle()\n\t\t// }\n\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event);\n\t\t}\n\t};\n\n\tthis.onChange = function (_input) {\n\t\tvar _props5 = _this2.props,\n\t\t    onChange = _props5.onChange,\n\t\t    countries = _props5.countries,\n\t\t    international = _props5.international,\n\t\t    limitMaxLength = _props5.limitMaxLength,\n\t\t    metadata = _props5.metadata;\n\n\t\tvar _parseInput = (0, _inputControl.parseInput)(_input, _this2.state.country, countries, international, limitMaxLength, metadata),\n\t\t    input = _parseInput.input,\n\t\t    country = _parseInput.country,\n\t\t    value = _parseInput.value;\n\n\t\t_this2.setState({\n\t\t\tparsed_input: input,\n\t\t\tvalue: value,\n\t\t\tcountry: country\n\t\t},\n\t\t// Update the new `value` property.\n\t\t// Doing it after the `state` has been updated\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t// with the new `value` which will be compared to `state.value` there.\n\t\tfunction () {\n\t\t\treturn onChange(value);\n\t\t});\n\t};\n\n\tthis._onFocus = function () {\n\t\treturn _this2.setState({ isFocused: true });\n\t};\n\n\tthis._onBlur = function () {\n\t\treturn _this2.setState({ isFocused: false });\n\t};\n\n\tthis.onFocus = function (event) {\n\t\tvar onFocus = _this2.props.onFocus;\n\n\n\t\t_this2._onFocus();\n\n\t\tif (onFocus) {\n\t\t\tonFocus(event);\n\t\t}\n\t};\n\n\tthis.onBlur = function (event) {\n\t\tvar onBlur = _this2.props.onBlur;\n\t\tvar value = _this2.state.value;\n\n\n\t\t_this2._onBlur();\n\n\t\tif (!onBlur) {\n\t\t\treturn;\n\t\t}\n\n\t\t// `event` is React's `SyntheticEvent`.\n\t\t// Its `.value` is read-only therefore cloning it.\n\t\tvar _event = _extends({}, event, {\n\t\t\ttarget: _extends({}, event.target, {\n\t\t\t\tvalue: value\n\t\t\t})\n\n\t\t\t// For `redux-form` event detection.\n\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t});_event.stopPropagation = event.stopPropagation;\n\t\t_event.preventDefault = event.preventDefault;\n\n\t\treturn onBlur(_event);\n\t};\n\n\tthis.hidePhoneInputField = function (hide) {\n\t\t_this2.setState({\n\t\t\thidePhoneInputField: hide\n\t\t});\n\t};\n\n\tthis.focus = function () {\n\t\treturn _this2.number_input.focus();\n\t};\n\n\tthis.storeCountrySelectInstance = function (_) {\n\t\treturn _this2.country_select = _;\n\t};\n\n\tthis.storePhoneNumberInputInstance = function (_) {\n\t\treturn _this2.number_input = _;\n\t};\n}, _temp)) || _class;\n\n// Generates country `<select/>` options.\n\n\nexports.default = PhoneNumberInput;\nfunction generate_country_select_options(props) {\n\tvar countries = props.countries,\n\t    labels = props.labels,\n\t    international = props.international,\n\t    countryOptions = props.countryOptions;\n\n\n\tvar CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props);\n\n\treturn transformCountryOptions((0, _inputControl.getCountrySelectOptions)(countries || (0, _countries.getCountryCodes)(labels), labels, international).map(function (_ref) {\n\t\tvar value = _ref.value,\n\t\t    label = _ref.label;\n\t\treturn {\n\t\t\tvalue: value,\n\t\t\tlabel: label,\n\t\t\ticon: CountrySelectOptionIcon\n\t\t};\n\t}), countryOptions);\n}\n\nfunction createCountrySelectOptionIconComponent(props) {\n\tvar flags = props.flags,\n\t    flagsPath = props.flagsPath,\n\t    FlagComponent = props.flagComponent,\n\t    InternationalIcon = props.internationalIcon;\n\n\n\treturn function (_ref2) {\n\t\tvar value = _ref2.value;\n\t\treturn _react2.default.createElement(\n\t\t\t'div',\n\t\t\t{\n\t\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input__icon', {\n\t\t\t\t\t'react-phone-number-input__icon--international': value === undefined\n\t\t\t\t}) },\n\t\t\tvalue ? _react2.default.createElement(FlagComponent, {\n\t\t\t\tcountry: value,\n\t\t\t\tflags: flags,\n\t\t\t\tflagsPath: flagsPath }) : _react2.default.createElement(InternationalIcon, null)\n\t\t);\n\t};\n}\n\n// Can move some country `<select/>` options\n// to the top of the list, for example.\n// See `countryOptions` property.\nfunction transformCountryOptions(options, transform) {\n\tif (!transform) {\n\t\treturn options;\n\t}\n\n\tvar optionsOnTop = [];\n\tvar optionsOnBottom = [];\n\tvar appendTo = optionsOnTop;\n\n\tvar _loop = function _loop() {\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) return 'break';\n\t\t\t_ref3 = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) return 'break';\n\t\t\t_ref3 = _i.value;\n\t\t}\n\n\t\tvar element = _ref3;\n\n\t\tif (element === '|') {\n\t\t\tappendTo.push({ divider: true });\n\t\t} else if (element === '...' || element === '…') {\n\t\t\tappendTo = optionsOnBottom;\n\t\t} else {\n\t\t\t// Find the position of the option.\n\t\t\tvar index = options.indexOf(options.filter(function (option) {\n\t\t\t\treturn option.value === element;\n\t\t\t})[0]);\n\t\t\t// Get the option.\n\t\t\tvar option = options[index];\n\t\t\t// Remove the option from its default position.\n\t\t\toptions.splice(index, 1);\n\t\t\t// Add the option on top.\n\t\t\tappendTo.push(option);\n\t\t}\n\t};\n\n\tfor (var _iterator = transform, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref3;\n\n\t\tvar _ret = _loop();\n\n\t\tif (_ret === 'break') break;\n\t}\n\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom);\n}\n\nfunction generateParsedInput(value, phoneNumber, props) {\n\tvar displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber;\n\n\t// If the `value` (E.164 phone number)\n\t// belongs to the currently selected country\n\t// and `displayInitialValueAsLocalNumber` property is `true`\n\t// then convert `value` (E.164 phone number)\n\t// to a local phone number digits.\n\t// E.g. '+78005553535' -> '88005553535'.\n\n\tif (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\n\t\treturn (0, _inputControl.generateNationalNumberDigits)(phoneNumber);\n\t}\n\n\treturn value;\n}\n\nfunction validateCountryOptions(countries, metadata) {\n\tfor (var _iterator2 = countries, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n\t\tvar _ref4;\n\n\t\tif (_isArray2) {\n\t\t\tif (_i2 >= _iterator2.length) break;\n\t\t\t_ref4 = _iterator2[_i2++];\n\t\t} else {\n\t\t\t_i2 = _iterator2.next();\n\t\t\tif (_i2.done) break;\n\t\t\t_ref4 = _i2.value;\n\t\t}\n\n\t\tvar country = _ref4;\n\n\t\tif (country && country !== '|' && country !== '...' && country !== '…') {\n\t\t\tif (!metadata.countries[country]) {\n\t\t\t\tthrowCountryNotFound(country);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction validateCountries(countries, metadata) {\n\tfor (var _iterator3 = countries, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n\t\tvar _ref5;\n\n\t\tif (_isArray3) {\n\t\t\tif (_i3 >= _iterator3.length) break;\n\t\t\t_ref5 = _iterator3[_i3++];\n\t\t} else {\n\t\t\t_i3 = _iterator3.next();\n\t\t\tif (_i3.done) break;\n\t\t\t_ref5 = _i3.value;\n\t\t}\n\n\t\tvar country = _ref5;\n\n\t\tif (!metadata.countries[country]) {\n\t\t\tthrowCountryNotFound(country);\n\t\t}\n\t}\n}\n\nfunction validateCountry(country, metadata) {\n\tif (!metadata.countries[country]) {\n\t\tthrowCountryNotFound(country);\n\t}\n}\n\nfunction throwCountryNotFound(country) {\n\tthrow new Error('Country not found: ' + country);\n}\n\nfunction parseExtDigits(event) {\n\tif (event) {\n\t\tif (typeof event === 'string') {\n\t\t\tevent = (0, _core.parseDigits)(event);\n\t\t} else if (event.target && event.target.value) {\n\t\t\tevent.target.value = (0, _core.parseDigits)(event.target.value);\n\t\t}\n\t}\n\treturn event;\n}\n//# sourceMappingURL=PhoneInput.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = formatPhoneNumber;\nexports.formatPhoneNumberIntl = formatPhoneNumberIntl;\n\nvar _core = require('libphonenumber-js/core');\n\nfunction formatPhoneNumber(value, format, metadata) {\n\tif (!metadata) {\n\t\tif ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {\n\t\t\tmetadata = format;\n\t\t\tformat = 'NATIONAL';\n\t\t}\n\t}\n\tif (!value) {\n\t\treturn '';\n\t}\n\tvar phoneNumber = (0, _core.parsePhoneNumberFromString)(value, metadata);\n\tif (!phoneNumber) {\n\t\treturn '';\n\t}\n\t// Deprecated.\n\t// Legacy `format`s.\n\tswitch (format) {\n\t\tcase 'National':\n\t\t\tformat = 'NATIONAL';\n\t\t\tbreak;\n\t\tcase 'International':\n\t\t\tformat = 'INTERNATIONAL';\n\t\t\tbreak;\n\t}\n\treturn phoneNumber.format(format);\n}\n\nfunction formatPhoneNumberIntl(value, metadata) {\n\treturn formatPhoneNumber(value, 'INTERNATIONAL', metadata);\n}\n//# sourceMappingURL=formatPhoneNumber.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.labels = exports.metadata = undefined;\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar metadata = exports.metadata = _propTypes2.default.shape({\n\tcountry_calling_codes: _propTypes2.default.object.isRequired,\n\tcountries: _propTypes2.default.object.isRequired\n});\n\nvar labels = exports.labels = _propTypes2.default.objectOf(_propTypes2.default.string);\n//# sourceMappingURL=PropTypes.js.map","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  }\n  // Binding \"this\" is important for shallow renderer support.\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n      prevProps,\n      prevState\n    );\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n}\n\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (\n    typeof Component.getDerivedStateFromProps !== 'function' &&\n    typeof prototype.getSnapshotBeforeUpdate !== 'function'\n  ) {\n    return Component;\n  }\n\n  // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n  if (\n    foundWillMountName !== null ||\n    foundWillReceivePropsName !== null ||\n    foundWillUpdateName !== null\n  ) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName =\n      typeof Component.getDerivedStateFromProps === 'function'\n        ? 'getDerivedStateFromProps()'\n        : 'getSnapshotBeforeUpdate()';\n\n    throw Error(\n      'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n        componentName +\n        ' uses ' +\n        newApiName +\n        ' but also contains the following legacy lifecycles:' +\n        (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') +\n        (foundWillReceivePropsName !== null\n          ? '\\n  ' + foundWillReceivePropsName\n          : '') +\n        (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') +\n        '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' +\n        'https://fb.me/react-async-component-lifecycle-hooks'\n    );\n  }\n\n  // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  }\n\n  // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error(\n        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'\n      );\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n      prevProps,\n      prevState,\n      maybeSnapshot\n    ) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag\n        ? this.__reactInternalSnapshot\n        : maybeSnapshot;\n\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };\n","module.exports = function cmp (a, b) {\n    var pa = a.split('.');\n    var pb = b.split('.');\n    for (var i = 0; i < 3; i++) {\n        var na = Number(pa[i]);\n        var nb = Number(pb[i]);\n        if (na > nb) return 1;\n        if (nb > na) return -1;\n        if (!isNaN(na) && isNaN(nb)) return 1;\n        if (isNaN(na) && !isNaN(nb)) return -1;\n    }\n    return 0;\n};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar CountrySelectNative = (_temp2 = _class = function (_Component) {\n\t_inherits(CountrySelectNative, _Component);\n\n\tfunction CountrySelectNative() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, CountrySelectNative);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CountrySelectNative.__proto__ || Object.getPrototypeOf(CountrySelectNative)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function (event) {\n\t\t\tvar onChange = _this.props.onChange;\n\n\t\t\tvar value = event.target.value;\n\t\t\tonChange(value === 'ZZ' ? undefined : value);\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t_createClass(CountrySelectNative, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props = this.props,\n\t\t\t    name = _props.name,\n\t\t\t    value = _props.value,\n\t\t\t    options = _props.options,\n\t\t\t    onFocus = _props.onFocus,\n\t\t\t    onBlur = _props.onBlur,\n\t\t\t    disabled = _props.disabled,\n\t\t\t    tabIndex = _props.tabIndex,\n\t\t\t    className = _props.className,\n\t\t\t    SelectArrow = _props.selectArrowComponent;\n\n\n\t\t\tvar selectedOption = void 0;\n\t\t\tfor (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\t\tvar _ref2;\n\n\t\t\t\tif (_isArray) {\n\t\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t\t_ref2 = _iterator[_i++];\n\t\t\t\t} else {\n\t\t\t\t\t_i = _iterator.next();\n\t\t\t\t\tif (_i.done) break;\n\t\t\t\t\t_ref2 = _i.value;\n\t\t\t\t}\n\n\t\t\t\tvar option = _ref2;\n\n\t\t\t\tif (!option.divider && option.value === value) {\n\t\t\t\t\tselectedOption = option;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _react2.default.createElement(\n\t\t\t\t'div',\n\t\t\t\t{ className: (0, _classnames2.default)(className, 'react-phone-number-input__country--native') },\n\t\t\t\tselectedOption && _react2.default.createElement(selectedOption.icon, { value: value }),\n\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t'select',\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tvalue: value || 'ZZ',\n\t\t\t\t\t\tonChange: this.onChange,\n\t\t\t\t\t\tonFocus: onFocus,\n\t\t\t\t\t\tonBlur: onBlur,\n\t\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\t\ttabIndex: tabIndex,\n\t\t\t\t\t\t'aria-label': this.props['aria-label'],\n\t\t\t\t\t\tclassName: 'react-phone-number-input__country-select' },\n\t\t\t\t\toptions.map(function (_ref3) {\n\t\t\t\t\t\tvar value = _ref3.value,\n\t\t\t\t\t\t    label = _ref3.label,\n\t\t\t\t\t\t    divider = _ref3.divider;\n\t\t\t\t\t\treturn _react2.default.createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: divider ? '|' : value || 'ZZ',\n\t\t\t\t\t\t\t\tvalue: divider ? '|' : value || 'ZZ',\n\t\t\t\t\t\t\t\tdisabled: divider ? true : false,\n\t\t\t\t\t\t\t\tclassName: divider ? 'react-phone-number-input__country-select-divider' : undefined },\n\t\t\t\t\t\t\tlabel\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t),\n\t\t\t\t_react2.default.createElement(SelectArrow, null)\n\t\t\t);\n\t\t}\n\t}]);\n\n\treturn CountrySelectNative;\n}(_react.Component), _class.propTypes = {\n\t// A two-letter country code.\n\t// E.g. \"US\", \"RU\", etc.\n\tvalue: _propTypes2.default.string,\n\n\t// Updates the `value`.\n\tonChange: _propTypes2.default.func.isRequired,\n\n\t// `<select/>` options.\n\toptions: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n\t\tvalue: _propTypes2.default.string,\n\t\tlabel: _propTypes2.default.string,\n\t\tdivider: _propTypes2.default.bool\n\t})).isRequired,\n\n\t// HTML `name` attribute.\n\tname: _propTypes2.default.string,\n\n\t// HTML `disabled` attribute.\n\tdisabled: _propTypes2.default.bool,\n\n\t// HTML `tabIndex` attribute.\n\ttabIndex: _propTypes2.default.number,\n\n\t// Select arrow component.\n\tselectArrowComponent: _propTypes2.default.func.isRequired,\n\n\t// Toggles the `--focus` CSS class.\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\n\tonFocus: _propTypes2.default.func,\n\n\t// Toggles the `--focus` CSS class.\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\n\tonBlur: _propTypes2.default.func\n}, _class.defaultProps = {\n\tselectArrowComponent: function selectArrowComponent() {\n\t\treturn _react2.default.createElement('div', { className: 'react-phone-number-input__country-select-arrow' });\n\t}\n}, _temp2);\nexports.default = CountrySelectNative;\n//# sourceMappingURL=CountrySelectNative.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _PhoneInput = require('./PhoneInput');\n\nvar _PhoneInput2 = _interopRequireDefault(_PhoneInput);\n\nvar _CountrySelectNative = require('./CountrySelectNative');\n\nvar _CountrySelectNative2 = _interopRequireDefault(_CountrySelectNative);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar PhoneInputNative = (_temp2 = _class = function (_Component) {\n\t_inherits(PhoneInputNative, _Component);\n\n\tfunction PhoneInputNative() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, PhoneInputNative);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PhoneInputNative.__proto__ || Object.getPrototypeOf(PhoneInputNative)).call.apply(_ref, [this].concat(args))), _this), _this.storeInputRef = function (ref) {\n\t\t\treturn _this.input = ref;\n\t\t}, _this.focus = function () {\n\t\t\treturn _this.input.focus();\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t_createClass(PhoneInputNative, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\treturn _react2.default.createElement(_PhoneInput2.default, _extends({}, this.props, {\n\t\t\t\tref: this.storeInputRef,\n\t\t\t\tcountrySelectComponent: _CountrySelectNative2.default,\n\t\t\t\tcountrySelectProperties: countrySelectProperties }));\n\t\t}\n\n\t\t// Proxy `.focus()` method.\n\n\t}]);\n\n\treturn PhoneInputNative;\n}(_react.Component), _class.propTypes = {\n\t// Replaces the default country select arrow.\n\tcountrySelectArrowComponent: _propTypes2.default.func\n}, _temp2);\nexports.default = PhoneInputNative;\n\n\nvar countrySelectProperties = {\n\tcountrySelectArrowComponent: 'selectArrowComponent'\n};\n//# sourceMappingURL=PhoneInputNative.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = InternationalIcon;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction InternationalIcon() {\n\treturn _react2.default.createElement(\n\t\t\"svg\",\n\t\t{ version: \"1.1\", xmlns: \"http://www.w3.org/2000/svg\", xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n\t\t\tviewBox: \"0 0 356.926 356.926\" },\n\t\t_react2.default.createElement(\n\t\t\t\"g\",\n\t\t\tnull,\n\t\t\t_react2.default.createElement(\n\t\t\t\t\"g\",\n\t\t\t\tnull,\n\t\t\t\t_react2.default.createElement(\"path\", { d: \"M211.89,213.669c0-10.475-8.521-18.997-18.996-18.997c-0.401,0-0.799,0.017-1.193,0.041v2.406\\r c0.396-0.028,0.79-0.061,1.193-0.061c9.158,0,16.608,7.452,16.608,16.611s-7.45,16.61-16.608,16.61\\r c-0.269,0-0.53-0.027-0.795-0.041v0.897v1.509v4.723H186.2v3.182h13.388v-3.182h-5.104v-4.774\\r C204.218,231.781,211.89,223.607,211.89,213.669z\" }),\n\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\"g\",\n\t\t\t\t\tnull,\n\t\t\t\t\t_react2.default.createElement(\"polygon\", { points: \"260.072,79.408 260.398,82.045 256.447,82.882 255.913,88.517 260.677,88.517 266.998,87.913 270.251,84.021\\r 266.788,82.678 264.883,80.488 262.024,75.858 260.677,69.329 255.286,70.409 253.799,72.721 253.799,75.312 256.378,77.084\\r \" }),\n\t\t\t\t\t_react2.default.createElement(\"polygon\", { points: \"255.495,81.569 255.773,78.037 252.637,76.683 248.233,77.706 244.945,82.94 244.945,86.344 248.768,86.344\\r \" }),\n\t\t\t\t\t_react2.default.createElement(\"path\", { d: \"M164.852,96.598l-0.976,2.498h-4.7v2.428h1.121c0,0,0.07,0.511,0.168,1.191l2.876-0.238l1.783-1.121l0.465-2.248\\r l2.335-0.204l0.912-1.888l-2.138-0.442L164.852,96.598z\" }),\n\t\t\t\t\t_react2.default.createElement(\"polygon\", { points: \"152.739,101.001 152.565,103.366 155.976,103.081 156.324,100.705 154.279,99.096 \\t\\t\\t\" }),\n\t\t\t\t\t_react2.default.createElement(\"path\", { d: \"M356.868,176.633c-0.047-5.223-0.313-10.398-0.802-15.505c-1.662-17.01-5.717-33.311-11.828-48.589\\r c-0.441-1.127-0.859-2.283-1.336-3.41c-8.121-19.183-19.531-36.646-33.474-51.721c-0.906-0.987-1.835-1.952-2.765-2.916\\r c-2.649-2.736-5.333-5.415-8.156-7.971C266.788,17.631,224.642,0,178.463,0C131.896,0,89.447,17.957,57.635,47.271\\r c-7.413,6.832-14.221,14.303-20.408,22.285C13.919,99.717,0,137.49,0,178.463c0,98.398,80.059,178.463,178.463,178.463\\r c69.225,0,129.316-39.643,158.897-97.399c6.32-12.327,11.247-25.491,14.569-39.294c0.837-3.486,1.58-7.018,2.208-10.585\\r c1.801-10.137,2.788-20.56,2.788-31.196C356.902,177.859,356.868,177.249,356.868,176.633z M323.278,105.306l1.022-1.162\\r c1.359,2.637,2.649,5.304,3.846,8.028l-1.708-0.07l-3.172,0.436v-7.233H323.278z M297.484,74.156l0.023-7.971\\r c2.812,2.975,5.508,6.036,8.087,9.214l-3.207,4.781l-11.247-0.111l-0.696-2.341L297.484,74.156z M82.214,54.364v-0.302h3.567\\r l0.325-1.226h5.838v2.55l-1.691,2.236h-8.052v-3.259H82.214z M87.925,62.323c0,0,3.578-0.61,3.892-0.61c0.296,0,0,3.573,0,3.573\\r l-8.081,0.511l-1.534-1.847L87.925,62.323z M334.642,133.156h-13.06l-7.971-5.92l-8.365,0.808v5.112h-2.648l-2.848-2.033\\r l-14.512-3.671v-9.4l-18.38,1.423l-5.705,3.062h-7.285l-3.59-0.36l-8.854,4.926v9.254l-18.097,13.065l1.5,5.583h3.677\\r l-0.964,5.315l-2.58,0.953l-0.133,13.884l15.633,17.823h6.819l0.407-1.081h12.246l3.531-3.265h6.948l3.812,3.811l10.328,1.069\\r l-1.359,13.757l11.503,20.28l-6.064,11.572l0.406,5.438l4.775,4.752v13.095l6.251,8.412v10.897h5.391\\r c-30.046,36.913-75.823,60.534-127.026,60.534c-90.312,0-163.783-73.454-163.783-163.777c0-22.732,4.665-44.401,13.077-64.089\\r v-5.106l5.855-7.11c2.033-3.846,4.212-7.582,6.542-11.235l0.25,2.974l-6.791,8.261c-2.108,3.985-4.084,8.052-5.855,12.217v9.312\\r l6.791,3.276v12.955l6.535,11.136l5.316,0.808l0.68-3.817l-6.245-9.661l-1.237-9.388h3.677l1.557,9.673l9.051,13.193l-2.33,4.27\\r l5.734,8.795l14.291,3.532v-2.306l5.711,0.808l-0.534,4.078l4.484,0.825l6.948,1.888l9.8,11.171l12.507,0.941l1.237,10.207\\r l-8.58,5.984l-0.39,9.115l-1.237,5.588l12.386,15.5l0.947,5.32c0,0,4.49,1.209,5.048,1.209c0.535,0,10.062,7.227,10.062,7.227\\r v28.024l3.393,0.964l-2.294,12.92l5.71,7.634l-1.068,12.827l7.563,13.269l9.696,8.47l9.731,0.197l0.952-3.148l-7.163-6.029\\r l0.418-2.986l1.272-3.684l0.273-3.741l-4.839-0.14l-2.44-3.066l4.021-3.881l0.546-2.916l-4.496-1.29l0.261-2.719l6.402-0.976\\r l9.73-4.672l3.265-6.006l10.196-13.06l-2.312-10.213l3.131-5.438l9.399,0.278l6.327-5.02l2.051-19.693l7.04-8.877l1.237-5.704\\r l-6.39-2.045l-4.224-6.942l-14.419-0.145l-11.444-4.351l-0.534-8.162l-3.811-6.675l-10.335-0.145l-5.995-9.382l-5.298-2.585\\r l-0.273,2.858l-9.672,0.569l-3.532-4.926l-10.079-2.045l-8.302,9.603l-13.065-2.23l-0.953-14.727l-9.527-1.632l3.805-7.221\\r l-1.092-4.148l-12.531,8.371l-7.877-0.964l-2.817-6.158l1.737-6.355l4.339-8.005l9.998-5.072h19.322l-0.064,5.891l6.948,3.235\\r l-0.558-10.062l5.007-5.037l10.103-6.64l0.703-4.659l10.068-10.486l10.707-5.937l-0.941-0.773l7.256-6.826l2.655,0.703\\r l1.214,1.522l2.76-3.062l0.68-0.296l-3.021-0.43l-3.084-0.987v-2.963l1.632-1.33h3.579l1.655,0.726l1.418,2.858l1.737-0.267\\r v-0.244l0.5,0.163l5.02-0.772l0.714-2.463l2.852,0.726v2.667l-2.666,1.818h0.018l0.377,2.928l9.115,2.794c0,0,0,0.035,0.023,0.11\\r l2.079-0.18l0.146-3.939l-7.209-3.282l-0.396-1.894l5.972-2.033l0.273-5.722l-6.245-3.805l-0.412-9.667l-8.581,4.218h-3.143\\r l0.837-7.355l-11.688-2.748l-4.816,3.654v11.119l-8.673,2.754l-3.486,7.244l-3.758,0.604v-9.277l-8.162-1.133l-4.096-2.667\\r l-1.639-6.007l14.611-8.54l7.14-2.179l0.72,4.804l3.991-0.215l0.308-2.411l4.166-0.599l0.07-0.842l-1.784-0.738l-0.407-2.544\\r l5.118-0.43l3.091-3.213l0.18-0.238l0.035,0.012l0.941-0.976l10.753-1.354l4.746,4.032l-12.467,6.64l15.871,3.747l2.045-5.31\\r h6.948l2.44-4.625l-4.903-1.226v-5.856l-15.359-6.803l-10.62,1.226l-6.001,3.125l0.407,7.628l-6.257-0.953l-0.964-4.212\\r l6.007-5.449l-10.898-0.535l-3.125,0.953l-1.359,3.677l4.084,0.686l-0.813,4.084l-6.936,0.406l-1.092,2.725L118.987,52.4\\r c0,0-0.273-5.711-0.703-5.711c-0.389,0,7.901-0.145,7.901-0.145l5.995-5.85l-3.271-1.632l-4.339,4.223l-7.222-0.406l-4.403-6.019\\r h-9.254L94.03,44.07h8.848l0.796,2.597l-2.307,2.172l9.807,0.279l1.487,3.532l-11.032-0.407l-0.546-2.725l-6.925-1.499\\r l-3.689-2.033l-8.255,0.069c27.043-19.699,60.284-31.358,96.226-31.358c41.403,0,79.263,15.476,108.124,40.915l-1.929,3.474\\r l-7.564,2.962l-3.194,3.462l0.743,4.02l3.893,0.546l2.358,5.867l6.704-2.713l1.127,7.86h-2.045l-5.519-0.819l-6.111,1.022\\r l-5.926,8.377l-8.458,1.319l-1.221,7.25l3.579,0.842l-1.046,4.665l-8.412-1.69l-7.703,1.69l-1.639,4.293l1.325,9.01l4.531,2.115\\r l7.61-0.046l5.123-0.465l1.58-4.078l8.018-10.422l5.264,1.081l5.193-4.7l0.976,3.678l12.78,8.621l-1.557,2.108l-5.763-0.308\\r l2.23,3.137l3.556,0.79l4.159-1.737l-0.093-5.002l1.859-0.923l-1.487-1.575l-8.528-4.758l-2.254-6.314h7.099l2.243,2.248\\r l6.134,5.257l0.244,6.367l6.332,6.733l2.348-9.231l4.392-2.394l0.802,7.552l4.287,4.7l8.54-0.139\\r c1.661,4.247,3.148,8.563,4.427,12.978L334.642,133.156z M97.324,81.092l4.27-2.044l3.881,0.929l-1.324,5.211l-4.183,1.319\\r L97.324,81.092z M120.073,93.35v3.37h-9.783l-3.689-1.028l0.918-2.341l4.7-1.94h6.437v1.94H120.073z M124.582,98.05v3.259\\r l-2.463,1.58l-3.044,0.575c0,0,0-4.903,0-5.415H124.582z M121.822,96.72v-3.893l3.363,3.067L121.822,96.72z M123.355,104.568\\r v3.178l-2.347,2.347h-5.211l0.813-3.573l2.463-0.215l0.5-1.226L123.355,104.568z M110.39,98.05h5.408l-6.948,9.696l-2.852-1.534\\r l0.616-4.084L110.39,98.05z M132.529,103.464v3.166h-5.211l-1.417-2.062v-2.951h0.406L132.529,103.464z M127.748,99.096\\r l1.475-1.557l2.498,1.557l-1.999,1.656L127.748,99.096z M337.291,141.428l0.511-0.61c0.232,0.93,0.441,1.859,0.662,2.789\\r L337.291,141.428z\" }),\n\t\t\t\t\t_react2.default.createElement(\"path\", { d: \"M27.734,109.268v5.106c1.771-4.177,3.747-8.231,5.855-12.223L27.734,109.268z\" })\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t);\n}\n//# sourceMappingURL=InternationalIcon.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.createPhoneInput = createPhoneInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _default = require('../locale/default.json');\n\nvar _default2 = _interopRequireDefault(_default);\n\nvar _InternationalIcon = require('./InternationalIcon');\n\nvar _InternationalIcon2 = _interopRequireDefault(_InternationalIcon);\n\nvar _PropTypes = require('./PropTypes');\n\nvar _PhoneInputNative = require('./PhoneInputNative');\n\nvar _PhoneInputNative2 = _interopRequireDefault(_PhoneInputNative);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction createPhoneInput(defaultMetadata) {\n\tvar _class, _temp2;\n\n\treturn _temp2 = _class = function (_Component) {\n\t\t_inherits(PhoneInputNativeDefaults, _Component);\n\n\t\tfunction PhoneInputNativeDefaults() {\n\t\t\tvar _ref;\n\n\t\t\tvar _temp, _this, _ret;\n\n\t\t\t_classCallCheck(this, PhoneInputNativeDefaults);\n\n\t\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\t\targs[_key] = arguments[_key];\n\t\t\t}\n\n\t\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PhoneInputNativeDefaults.__proto__ || Object.getPrototypeOf(PhoneInputNativeDefaults)).call.apply(_ref, [this].concat(args))), _this), _this.storeInputRef = function (ref) {\n\t\t\t\treturn _this.input = ref;\n\t\t\t}, _this.render = function () {\n\t\t\t\treturn _react2.default.createElement(_PhoneInputNative2.default, _extends({ ref: _this.storeInputRef }, _this.props));\n\t\t\t}, _this.focus = function () {\n\t\t\t\treturn _this.input.focus();\n\t\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t\t}\n\n\t\treturn PhoneInputNativeDefaults;\n\t}(_react.Component), _class.propTypes = {\n\t\tmetadata: _PropTypes.metadata.isRequired,\n\t\tlabels: _PropTypes.labels.isRequired,\n\t\tinternationalIcon: _propTypes2.default.func.isRequired\n\t}, _class.defaultProps = {\n\t\tmetadata: defaultMetadata,\n\t\tlabels: _default2.default,\n\t\tinternationalIcon: _InternationalIcon2.default\n\t}, _temp2;\n}\n\nexports.default = createPhoneInput();\n//# sourceMappingURL=PhoneInputNativeDefaults.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = isValidPhoneNumber;\n\nvar _core = require('libphonenumber-js/core');\n\nfunction isValidPhoneNumber(value, metadata) {\n\tif (!value) {\n\t\treturn false;\n\t}\n\tvar phoneNumber = (0, _core.parsePhoneNumberFromString)(value, metadata);\n\tif (!phoneNumber) {\n\t\treturn false;\n\t}\n\treturn phoneNumber.isValid();\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getCountryCodes = getCountryCodes;\nfunction getCountryCodes(labels) {\n\t// Includes all country codes (excluding \"ZZ\" for \"International\").\n\t//\n\t// From ISO 3166-1:2006(E/F):\n\t//\n\t// 8.1.3   User-assigned code elements\n\t//\n\t// If users need code elements to represent country names not included\n\t// in this part of ISO 3166, the series of letters AA, QM to QZ, XA\n\t// to XZ, and ZZ, and the series AAA to AAZ, QMA to QZZ, XAA to XZZ,\n\t// and ZZA to ZZZ respectively, and the series of numbers 900 to 999\n\t// are available. These users should inform the ISO 3166/MA of such use.\n\t//\n\treturn Object.keys(labels).filter(function (key) {\n\t\treturn key.length === 2 && key.toUpperCase() === key && key !== 'ZZ';\n\t});\n}\n//# sourceMappingURL=countries.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getPreSelectedCountry = getPreSelectedCountry;\nexports.getCountrySelectOptions = getCountrySelectOptions;\nexports.parsePhoneNumber = parsePhoneNumber;\nexports.generateNationalNumberDigits = generateNationalNumberDigits;\nexports.migrateParsedInputForNewCountry = migrateParsedInputForNewCountry;\nexports.e164 = e164;\nexports.trimNumber = trimNumber;\nexports.getCountryForPartialE164Number = getCountryForPartialE164Number;\nexports.parseInput = parseInput;\nexports.get_country_from_possibly_incomplete_international_phone_number = get_country_from_possibly_incomplete_international_phone_number;\nexports.compare_strings = compare_strings;\nexports.strip_country_calling_code = strip_country_calling_code;\nexports.get_national_significant_number_part = get_national_significant_number_part;\nexports.could_number_belong_to_country = could_number_belong_to_country;\n\nvar _core = require('libphonenumber-js/core');\n\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\nfunction getPreSelectedCountry(phoneNumber, country, countries, includeInternationalOption, metadata) {\n\t// If can get country from E.164 phone number\n\t// then it overrides the `country` passed (or not passed).\n\tif (phoneNumber && phoneNumber.country) {\n\t\t// `country` will be left `undefined` in case of non-detection.\n\t\tcountry = phoneNumber.country;\n\t}\n\n\t// Only pre-select a country if it's in the available `countries` list.\n\tif (countries && countries.indexOf(country) < 0) {\n\t\tcountry = undefined;\n\t}\n\n\t// If there will be no \"International\" option\n\t// then some `country` must be selected.\n\t// It will still be the wrong country though.\n\t// But still country `<select/>` can't be left in a broken state.\n\tif (!country && !includeInternationalOption && countries && countries.length > 0) {\n\t\tcountry = countries[0];\n\t}\n\n\treturn country;\n}\n\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} includeInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\nfunction getCountrySelectOptions(countries, country_names, includeInternationalOption) {\n\t// Generates a `<Select/>` option for each country.\n\tvar country_select_options = countries.map(function (country) {\n\t\treturn {\n\t\t\tvalue: country,\n\t\t\tlabel: country_names[country]\n\t\t};\n\t});\n\n\t// Sort the list of countries alphabetically.\n\tcountry_select_options.sort(function (a, b) {\n\t\treturn compare_strings(a.label, b.label);\n\t});\n\n\t// Add the \"International\" option to the country list (if suitable)\n\tif (includeInternationalOption) {\n\t\tcountry_select_options.unshift({\n\t\t\tlabel: country_names.ZZ\n\t\t});\n\t}\n\n\treturn country_select_options;\n}\n\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\nfunction parsePhoneNumber(value, metadata) {\n\treturn (0, _core.parsePhoneNumberFromString)(value || '', metadata);\n}\n\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\nfunction generateNationalNumberDigits(phoneNumber) {\n\treturn phoneNumber.formatNational().replace(/\\D/g, '');\n}\n\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} value - The `value` parsed from phone number `<input/>` (it's the `parsed_input` state property, not the `value` property).\r\n * @param {string?} previousCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} preferNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\nfunction migrateParsedInputForNewCountry(value, previous_country, new_country, metadata, preferNationalFormat) {\n\t// If `parsed_input` is empty\n\t// then no need to migrate anything.\n\tif (!value) {\n\t\treturn value;\n\t}\n\n\t// If switching to some country.\n\t// (from \"International\" or another country)\n\t// If switching from \"International\" then `value` starts with a `+`.\n\t// Otherwise it may or may not start with a `+`.\n\tif (new_country) {\n\t\t// If the phone number was entered in international format\n\t\t// then migrate it to the newly selected country.\n\t\t// The phone number may be incomplete.\n\t\t// The phone number entered not necessarily starts with\n\t\t// the previously selected country phone prefix.\n\t\tif (value[0] === '+') {\n\t\t\t// If the international phone number is for the new country\n\t\t\t// then convert it to local if required.\n\t\t\tif (preferNationalFormat) {\n\t\t\t\t// If a phone number is being input in international form\n\t\t\t\t// and the country can already be derived from it,\n\t\t\t\t// and if it is the new country, then format as a national number.\n\t\t\t\tvar derived_country = get_country_from_possibly_incomplete_international_phone_number(value, metadata);\n\t\t\t\tif (derived_country === new_country) {\n\t\t\t\t\treturn strip_country_calling_code(value, derived_country, metadata);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If the international phone number already contains\n\t\t\t// any country calling code then trim the country calling code part.\n\t\t\t// (that could also be the newly selected country phone code prefix as well)\n\t\t\t// `value` doesn't neccessarily belong to `previous_country`.\n\t\t\t// (e.g. if a user enters an international number\n\t\t\t//  not belonging to any of the reduced `countries` list).\n\t\t\tvalue = strip_country_calling_code(value, previous_country, metadata);\n\n\t\t\t// Prepend country calling code prefix\n\t\t\t// for the newly selected country.\n\t\t\treturn e164(value, new_country, metadata) || '+' + (0, _core.getCountryCallingCode)(new_country, metadata);\n\t\t}\n\t}\n\t// If switching to \"International\" from a country.\n\telse {\n\t\t\t// If the phone number was entered in national format.\n\t\t\tif (value[0] !== '+') {\n\t\t\t\t// Format the national phone number as an international one.\n\t\t\t\t// The phone number entered not necessarily even starts with\n\t\t\t\t// the previously selected country phone prefix.\n\t\t\t\t// Even if the phone number belongs to whole another country\n\t\t\t\t// it will still be parsed into some national phone number.\n\t\t\t\treturn e164(value, previous_country, metadata) || '';\n\t\t\t}\n\t\t}\n\n\treturn value;\n}\n\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\nfunction e164(number, country, metadata) {\n\tif (!number) {\n\t\treturn;\n\t}\n\n\t// If the phone number is being input in international format.\n\tif (number[0] === '+') {\n\t\t// If it's just the `+` sign then return nothing.\n\t\tif (number === '+') {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are any digits then the `value` is returned as is.\n\t\treturn number;\n\t}\n\n\t// For non-international phone numbers\n\t// an accompanying country code is required.\n\tif (!country) {\n\t\treturn;\n\t}\n\n\tvar partial_national_significant_number = get_national_significant_number_part(number, country, metadata);\n\n\tif (partial_national_significant_number) {\n\t\treturn '+' + (0, _core.getCountryCallingCode)(country, metadata) + partial_national_significant_number;\n\t}\n}\n\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\nfunction trimNumber(number, country, metadata) {\n\tvar nationalSignificantNumberPart = get_national_significant_number_part(number, country, metadata);\n\tvar overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n\tif (overflowDigitsCount > 0) {\n\t\treturn number.slice(0, number.length - overflowDigitsCount);\n\t}\n\treturn number;\n}\n\nfunction getMaxNumberLength(country, metadata) {\n\t// Get \"possible lengths\" for a phone number of the country.\n\tmetadata = new _core.Metadata(metadata);\n\tmetadata.country(country);\n\t// Return the last \"possible length\".\n\treturn metadata.possibleLengths()[metadata.possibleLengths().length - 1];\n}\n\n// If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n/**\r\n * @param {string} parsedInput - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\nfunction getCountryForPartialE164Number(partialE164Number, country, countries, includeInternationalOption, metadata) {\n\tif (partialE164Number === '+') {\n\t\t// Don't change the currently selected country yet.\n\t\treturn country;\n\t}\n\n\tvar derived_country = get_country_from_possibly_incomplete_international_phone_number(partialE164Number, metadata);\n\n\t// If a phone number is being input in international form\n\t// and the country can already be derived from it,\n\t// then select that country.\n\tif (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n\t\treturn derived_country;\n\t}\n\t// If \"International\" country option has not been disabled\n\t// and the international phone number entered doesn't correspond\n\t// to the currently selected country then reset the currently selected country.\n\telse if (country && includeInternationalOption && !could_number_belong_to_country(partialE164Number, country, metadata)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t// Don't change the currently selected country.\n\treturn country;\n}\n\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} input — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\nfunction parseInput(input, country, countries, includeInternationalOption, limitMaxLength, metadata) {\n\t// Trim the input to not exceed the maximum possible number length.\n\tif (input && country && limitMaxLength) {\n\t\tinput = trimNumber(input, country, metadata);\n\t}\n\n\t// If this `onChange()` event was triggered\n\t// as a result of selecting \"International\" country\n\t// then force-prepend a `+` sign if the phone number\n\t// `<input/>` value isn't in international format.\n\tif (input && !country && input[0] !== '+') {\n\t\tinput = '+' + input;\n\t}\n\n\t// Generate the new `value` property.\n\tvar value = void 0;\n\tif (input) {\n\t\tif (input[0] === '+') {\n\t\t\tif (input !== '+') {\n\t\t\t\tvalue = input;\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = e164(input, country, metadata);\n\t\t}\n\t}\n\n\t// Derive the country from the phone number.\n\t// (regardless of whether there's any country currently selected)\n\tif (value) {\n\t\tcountry = getCountryForPartialE164Number(value, country, countries, includeInternationalOption, metadata);\n\t}\n\n\treturn {\n\t\tinput: input,\n\t\tcountry: country,\n\t\tvalue: value\n\t};\n}\n\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\nfunction get_country_from_possibly_incomplete_international_phone_number(number, metadata) {\n\tvar formatter = new _core.AsYouType(null, metadata);\n\tformatter.input(number);\n\t// `001` is a special \"non-geograpical entity\" code\n\t// in Google's `libphonenumber` library.\n\tif (formatter.country === '001') {\n\t\treturn;\n\t}\n\treturn formatter.country;\n}\n\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n */\nfunction compare_strings(a, b) {\n\t// Use `String.localeCompare` if it's available.\n\t// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\t// Which means everyone except IE <= 10 and Safari <= 10.\n\t// `localeCompare()` is available in latest Node.js versions.\n\t/* istanbul ignore else */\n\tif (String.prototype.localeCompare) {\n\t\treturn a.localeCompare(b);\n\t}\n\t/* istanbul ignore next */\n\treturn a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\nfunction strip_country_calling_code(number, country, metadata) {\n\t// Just an optimization, so that it\n\t// doesn't have to iterate through all country calling codes.\n\tif (country) {\n\t\tvar country_calling_prefix = '+' + (0, _core.getCountryCallingCode)(country, metadata);\n\n\t\t// If `country` fits the actual `number`.\n\t\tif (number.length < country_calling_prefix.length) {\n\t\t\tif (country_calling_prefix.indexOf(number) === 0) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t} else {\n\t\t\tif (number.indexOf(country_calling_prefix) === 0) {\n\t\t\t\treturn number.slice(country_calling_prefix.length);\n\t\t\t}\n\t\t}\n\t}\n\n\t// If `country` doesn't fit the actual `number`.\n\t// Try all available country calling codes.\n\tfor (var _iterator = Object.keys(metadata.country_calling_codes), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar country_calling_code = _ref;\n\n\t\tif (number.indexOf(country_calling_code) === '+'.length) {\n\t\t\treturn number.slice('+'.length + country_calling_code.length);\n\t\t}\n\t}\n\n\treturn '';\n}\n\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\nfunction get_national_significant_number_part(number, country, metadata) {\n\t// Create \"as you type\" formatter.\n\tvar formatter = new _core.AsYouType(country, metadata);\n\n\t// Input partial national phone number.\n\tformatter.input(number);\n\n\t// Return the parsed partial national phone number.\n\treturn formatter.getNationalNumber();\n}\n\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\nfunction could_number_belong_to_country(number, country, metadata) {\n\tvar country_calling_code = (0, _core.getCountryCallingCode)(country, metadata);\n\n\tvar i = 0;\n\twhile (i + 1 < number.length && i < country_calling_code.length) {\n\t\tif (number[i + 1] !== country_calling_code[i]) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=input-control.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\nvar FlagComponent = function FlagComponent(_ref) {\n\tvar country = _ref.country,\n\t    flags = _ref.flags,\n\t    flagsPath = _ref.flagsPath,\n\t    className = _ref.className;\n\n\tif (flags && flags[country]) {\n\t\treturn flags[country]();\n\t}\n\n\treturn _react2.default.createElement('img', {\n\t\talt: country,\n\t\tclassName: 'react-phone-number-input__icon-image',\n\t\tsrc: '' + flagsPath + country.toLowerCase() + '.svg' });\n};\n\nFlagComponent.propTypes = {\n\t// The country to be selected by default.\n\t// Two-letter country code (\"ISO 3166-1 alpha-2\").\n\tcountry: _propTypes2.default.string.isRequired,\n\n\t// Country flag icon components.\n\t// By default flag icons are inserted as `<img/>`s\n\t// with their `src` pointed to `flag-icon-css` github repo.\n\t// There might be cases (e.g. an offline application)\n\t// where having a large (3 megabyte) `<svg/>` flags\n\t// bundle is more appropriate.\n\t// `import flags from 'react-phone-number-input/flags'`.\n\tflags: _propTypes2.default.objectOf(_propTypes2.default.func),\n\n\t// A base URL path for national flag SVG icons.\n\t// By default it uses the ones from `flag-icon-css` github repo.\n\tflagsPath: _propTypes2.default.string.isRequired\n};\n\nexports.default = FlagComponent;\n//# sourceMappingURL=Flag.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.createInput = createInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _core = require('libphonenumber-js/core');\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// `PureComponent` is only available in React >= 15.3.0.\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nfunction createInput(defaultMetadata) {\n\tvar _class, _temp2;\n\n\t/**\r\n  * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n  * but still works good enough. When erasing or inserting digits in the middle\r\n  * of a phone number the caret usually jumps to the end: this is the expected\r\n  * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n  */\n\tvar InputBasic = (_temp2 = _class = function (_PureComponent) {\n\t\t_inherits(InputBasic, _PureComponent);\n\n\t\tfunction InputBasic() {\n\t\t\tvar _ref;\n\n\t\t\tvar _temp, _this, _ret;\n\n\t\t\t_classCallCheck(this, InputBasic);\n\n\t\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\t\targs[_key] = arguments[_key];\n\t\t\t}\n\n\t\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InputBasic.__proto__ || Object.getPrototypeOf(InputBasic)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.onChange = function (event) {\n\t\t\t\tvar onChange = _this.props.onChange;\n\t\t\t\tvar value = _this.state.value;\n\n\n\t\t\t\tvar newValue = (0, _core.parseIncompletePhoneNumber)(event.target.value);\n\n\t\t\t\t// By default, if a value is something like `\"(123)\"`\n\t\t\t\t// then Backspace would only erase the rightmost brace\n\t\t\t\t// becoming something like `\"(123\"`\n\t\t\t\t// which would give the same `\"123\"` value\n\t\t\t\t// which would then be formatted back to `\"(123)\"`\n\t\t\t\t// and so a user wouldn't be able to erase the phone number.\n\t\t\t\t// Working around this issue with this simple hack.\n\t\t\t\tif (newValue === value) {\n\t\t\t\t\tif (_this.format(newValue).indexOf(event.target.value) === 0) {\n\t\t\t\t\t\t// Trim the last digit (or plus sign).\n\t\t\t\t\t\tnewValue = newValue.slice(0, -1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t\t\t// https://github.com/facebook/react/issues/955\n\t\t\t\t_this.setState({ value: newValue }, function () {\n\t\t\t\t\treturn onChange(newValue);\n\t\t\t\t});\n\t\t\t}, _this.onBlur = function (event) {\n\t\t\t\tvar onBlur = _this.props.onBlur;\n\t\t\t\tvar value = _this.state.value;\n\n\n\t\t\t\tif (onBlur) {\n\t\t\t\t\t// `event` is React's `SyntheticEvent`.\n\t\t\t\t\t// Its `.value` is read-only therefore cloning it.\n\t\t\t\t\tvar _event = _extends({}, event, {\n\t\t\t\t\t\ttarget: _extends({}, event.target, {\n\t\t\t\t\t\t\tvalue: value\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\t// Workaround for `redux-form` event detection.\n\t\t\t\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t\t\t});_event.stopPropagation = event.stopPropagation;\n\t\t\t\t\t_event.preventDefault = event.preventDefault;\n\n\t\t\t\t\treturn onBlur(_event);\n\t\t\t\t}\n\t\t\t}, _this.focus = function () {\n\t\t\t\treturn _this.input.focus();\n\t\t\t}, _this.storeInput = function (ref) {\n\t\t\t\treturn _this.input = ref;\n\t\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t\t}\n\n\t\t_createClass(InputBasic, [{\n\t\t\tkey: 'format',\n\t\t\tvalue: function format(value) {\n\t\t\t\tvar _props = this.props,\n\t\t\t\t    country = _props.country,\n\t\t\t\t    metadata = _props.metadata;\n\n\n\t\t\t\treturn (0, _core.formatIncompletePhoneNumber)(value, country, metadata);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'render',\n\t\t\tvalue: function render() {\n\t\t\t\tvar _props2 = this.props,\n\t\t\t\t    onChange = _props2.onChange,\n\t\t\t\t    onFocus = _props2.onFocus,\n\t\t\t\t    country = _props2.country,\n\t\t\t\t    metadata = _props2.metadata,\n\t\t\t\t    rest = _objectWithoutProperties(_props2, ['onChange', 'onFocus', 'country', 'metadata']);\n\n\t\t\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t\t\t// https://github.com/facebook/react/issues/955\n\n\n\t\t\t\tvar value = this.state.value;\n\n\n\t\t\t\treturn _react2.default.createElement('input', _extends({\n\t\t\t\t\ttype: 'tel',\n\t\t\t\t\tautoComplete: 'tel'\n\t\t\t\t}, rest, {\n\t\t\t\t\tref: this.storeInput,\n\t\t\t\t\tvalue: this.format(value),\n\t\t\t\t\tonChange: this.onChange,\n\t\t\t\t\tonFocus: onFocus,\n\t\t\t\t\tonBlur: this.onBlur }));\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'getDerivedStateFromProps',\n\n\n\t\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t\t// https://github.com/facebook/react/issues/955\n\t\t\tvalue: function getDerivedStateFromProps(_ref2) {\n\t\t\t\tvar value = _ref2.value;\n\n\t\t\t\treturn { value: value };\n\t\t\t}\n\n\t\t\t// This `onBlur` interceptor is a workaround for `redux-form`'s bug\n\t\t\t// so that it gets the up-to-date `value` in its `onBlur` handler.\n\t\t\t// Without this fix it just gets the actual (raw) input field textual value.\n\t\t\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\n\t\t\t//\n\t\t\t// New `value` is taken from `event` in `redux-form`'s `handleBlur()`.\n\t\t\t// https://github.com/erikras/redux-form/blob/785edf8aac3adc84aba2ab6898a4aa8c48687750/src/ConnectedField.js#L168\n\t\t\t// `redux-form` shouldn't have taken the new `value` from `event`.\n\t\t\t//\n\t\t\t// A developer is not supposed to pass this `onBlur` property manually.\n\t\t\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t\t\t// and this component patches that `onBlur` handler (a hacky way but works).\n\t\t\t//\n\n\t\t}]);\n\n\t\treturn InputBasic;\n\t}(PureComponent), _class.propTypes = {\n\t\t// The parsed phone number.\n\t\t// E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t\tvalue: _propTypes2.default.string.isRequired,\n\n\t\t// Updates the `value`.\n\t\tonChange: _propTypes2.default.func.isRequired,\n\n\t\t// Toggles the `--focus` CSS class.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\n\t\tonFocus: _propTypes2.default.func,\n\n\t\t// `onBlur` workaround for `redux-form`'s bug.\n\t\tonBlur: _propTypes2.default.func,\n\n\t\t// A two-letter country code for formatting `value`\n\t\t// as a national phone number (e.g. `(800) 555 35 35`).\n\t\t// E.g. \"US\", \"RU\", etc.\n\t\t// If no `country` is passed then `value`\n\t\t// is formatted as an international phone number.\n\t\t// (e.g. `+7 800 555 35 35`)\n\t\tcountry: _propTypes2.default.string,\n\n\t\t// `libphonenumber-js` metadata.\n\t\tmetadata: _propTypes2.default.object.isRequired\n\t}, _class.defaultProps = {\n\t\tmetadata: defaultMetadata }, _temp2);\n\n\n\treturn (0, _reactLifecyclesCompat.polyfill)(InputBasic);\n}\n\nexports.default = createInput();\n//# sourceMappingURL=InputBasic.js.map","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    invariant(\n      false,\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","'use strict'\r\n\r\nexports = module.exports = require('../commonjs/PhoneInput').default\r\n\r\nexports.formatPhoneNumber = require('../commonjs/formatPhoneNumber').default\r\nexports.formatPhoneNumberIntl = require('../commonjs/formatPhoneNumber').formatPhoneNumberIntl\r\nexports.isValidPhoneNumber = require('../commonjs/isValidPhoneNumber').default\r\n\r\nexports['default'] = require('../commonjs/PhoneInput').default","'use strict'\r\n\r\nvar metadata = require('libphonenumber-js/metadata.min.json')\r\nvar core = require('../core/index.commonjs')\r\nvar createPhoneInput = require('../commonjs/PhoneInputNativeDefaults').createPhoneInput\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nvar PhoneInput = createPhoneInput(metadata)\r\n\r\nexports = module.exports = PhoneInput\r\n\r\nexports.formatPhoneNumber = function formatPhoneNumber() {\r\n\treturn call(core.formatPhoneNumber, arguments)\r\n}\r\n\r\nexports.formatPhoneNumberIntl = function formatPhoneNumberIntl() {\r\n\treturn call(core.formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexports.isValidPhoneNumber = function isValidPhoneNumber() {\r\n\treturn call(core.isValidPhoneNumber, arguments)\r\n}\r\n\r\nexports['default'] = PhoneInput"],"sourceRoot":""}